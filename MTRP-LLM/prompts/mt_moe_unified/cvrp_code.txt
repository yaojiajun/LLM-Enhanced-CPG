1: def cvrp_scores(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor,
                  current_load: torch.Tensor) -> torch.Tensor:
    # Compute the normalized distance-based heuristic score matrix with added diversity through randomness
    normalized_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.7

    # Compute the demand-based heuristic score matrix with emphasis on high-demand nodes and enhanced randomness
    demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.8 + torch.max(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    # Introduce increased randomness for exploration with higher noise level for improved diversity
    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0

    # Combine the different heuristic scores with diversified strategies for balanced exploration
    heuristic_scores = normalized_distance_scores + demand_scores + enhanced_noise

    return heuristic_scores