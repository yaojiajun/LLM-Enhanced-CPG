```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    # Eligible routes based on capacity constraints
    delivery_capacity_mask = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    open_delivery_capacity_mask = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0)).float()
    
    # Eligible routes based on length constraints
    length_mask = (current_length.unsqueeze(1) >= current_distance_matrix).float()

    # Eligible routes based on time windows
    arrivals_mask = (arrival_times.unsqueeze(1) <= time_windows[:, 0].unsqueeze(0)).float()
    latest_arrival_mask = (arrival_times.unsqueeze(1) <= time_windows[:, 1].unsqueeze(0) + current_distance_matrix).float()

    # Calculate feasibility mask
    feasibility_mask = delivery_capacity_mask * open_delivery_capacity_mask * length_mask * arrivals_mask * latest_arrival_mask

    # Base heuristic score as the negative distance (favoring shorter edges)
    base_scores = -current_distance_matrix

    # Combine with feasibility mask (0 if not feasible, or base score if feasible)
    heuristic_scores = feasibility_mask * base_scores

    # Add random noise to heuristic scores to promote exploratory search
    noise = torch.rand_like(heuristic_scores) * 0.01  # small random noise to reduce convergence
    heuristic_scores += noise

    return heuristic_scores
```
