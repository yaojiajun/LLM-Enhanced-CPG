```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    # Initializing a zero score matrix
    score_matrix = torch.zeros_like(current_distance_matrix)

    # Observed conditions: delivery feasibility for both explicit and open delivery scenarios
    feasible_delivery = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0))
    feasible_open_delivery = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0))
    
    # Consider time window feasibility
    current_time = arrival_times.unsqueeze(1)
    time_window_open = (current_time <= time_windows[:, 1].unsqueeze(0)) & (current_time >= time_windows[:, 0].unsqueeze(0))
    
    # Duration feasibility
    duration_viability = (current_length.unsqueeze(1) >= current_distance_matrix)
    
    # Create a combined mask for feasibility
    feasibility_mask = feasible_delivery & feasible_open_delivery & time_window_open & duration_viability

    # Score calculation
    # Promising routes have negative distances with feasibility
    score_matrix[feasibility_mask] = -current_distance_matrix[feasibility_mask]
    
    # Introduce enhanced randomness by manipulating easy segments
    randomness_factor = 0.1 * torch.randn_like(score_matrix)
    score_matrix += randomness_factor
    
    # Positive '{}' transitions yield randomness for retained negative scores
    score_matrix[~feasibility_mask] = -1000  # introduce a strong penalty for infeasibility

    return score_matrix
```
