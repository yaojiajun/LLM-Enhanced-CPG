```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    # Calculate available capacity and safe deliveries
    available_capacity = current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)
    safe_deliveries = available_capacity & (current_length.unsqueeze(1) >= current_distance_matrix)
    
    # Check time window constraints
    arrival_windows = (arrival_times + current_distance_matrix <= time_windows[:, 1].unsqueeze(0)) & \
                      (arrival_times + current_distance_matrix >= time_windows[:, 0].unsqueeze(0))
    
    # Calculate effective heuristic indicators
    distance_score = -current_distance_matrix  # more distance penalized negatively
    capacity_score = safe_deliveries.float() * 10  # add scoring for feasible deliveries
    time_window_score = arrival_windows.float() * 5  # additional score for within time window
    
    # Implement randomness to prevent local optima
    randomness = torch.rand_like(distance_score) * 2 - 1  # Random values from -1 to 1
    heuristic_scores = distance_score + capacity_score + time_window_score + randomness
    
    # Replace undesired paths (infeasible based on constraints)
    heuristic_scores[~available_capacity | ~arrival_windows] = float('-inf')
    
    return heuristic_scores
```
