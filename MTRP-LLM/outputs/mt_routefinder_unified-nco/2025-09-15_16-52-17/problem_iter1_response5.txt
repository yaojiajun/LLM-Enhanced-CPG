```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    # Initialize heuristic score matrix with zeros
    heuristic_scores = torch.zeros_like(current_distance_matrix)
    
    # Calculate feasible nodes based on load, delivery, and time window constraints
    can_access = ((current_load.unsqueeze(-1) >= delivery_node_demands.unsqueeze(0)) &
                  (current_load_open.unsqueeze(-1) >= delivery_node_demands_open.unsqueeze(0)) &
                  (arrival_times.unsqueeze(-1) <= time_windows[:, 1].unsqueeze(0)) &
                  (arrival_times.unsqueeze(-1) + current_distance_matrix <= time_windows[:, 1].unsqueeze(0))).to(torch.float32)

    # Penalizing distances that exceed remaining route length
    length_penalty = (current_distance_matrix > current_length.unsqueeze(-1)).to(torch.float32) * float('inf')

    # Apply penalties to scores
    adjusted_distance = current_distance_matrix + length_penalty

    # Calculate heuristic scores; we are treating lower distances and better constraints favorably
    heuristic_scores = (1 / (adjusted_distance + 1e-6)) * can_access # prevent division by zero

    # Introduce regularization component via random noise to add variability in selection
    randomness = (torch.rand_like(heuristic_scores) - 0.5) * 0.1  # mild randomness
    heuristic_scores += randomness

    # Normalize heuristic scores
    heuristic_scores = (heuristic_scores - heuristic_scores.min()) / (heuristic_scores.max() - heuristic_scores.min() + 1e-6)

    return heuristic_scores
```
