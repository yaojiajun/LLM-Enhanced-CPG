```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    # Initialize the heuristic score matrix
    heuristic_scores = -current_distance_matrix.clone()
    
    # Capacity constraints
    capacity_mask = (delivery_node_demands.unsqueeze(0) <= current_load.unsqueeze(1)) & \
                    (delivery_node_demands_open.unsqueeze(0) <= current_load_open.unsqueeze(1))
    heuristic_scores -= capacity_mask.float() * 1000  # Large penalty for violating capacity
    
    # Time window feasibility
    time_window_mask = (arrival_times + current_distance_matrix >= time_windows[:, 0].unsqueeze(0)) & \
                       (arrival_times + current_distance_matrix <= time_windows[:, 1].unsqueeze(0))
    heuristic_scores += time_window_mask.float() * 500  # Bonus for being within time windows
    
    # Duration limits
    duration_mask = (current_length.unsqueeze(1) - current_distance_matrix >= 0)
    heuristic_scores += duration_mask.float() * 300  # Bonus for staying within duration limits
    
    # Backhaul demands (pickup considerations)
    backhaul_capacity_mask = (pickup_node_demands.unsqueeze(0) <= current_load.unsqueeze(1)) & \
                             (pickup_node_demands.unsqueeze(0) <= current_load_open.unsqueeze(1))
    heuristic_scores -= backhaul_capacity_mask.float() * 1000  # Large penalty for violating backhaul capacity
    
    # Incorporate randomness to avoid local optima
    random_factor = torch.rand_like(heuristic_scores) * 0.1  # Random value between [0, 0.1)
    heuristic_scores += random_factor
    
    # Incorporate a scaling factor to emphasize feasible routes
    scaling_factor = 1 / (1 + current_distance_matrix.mean(dim=1).unsqueeze(1))
    heuristic_scores *= scaling_factor

    return heuristic_scores
```
