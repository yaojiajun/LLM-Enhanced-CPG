```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Calculate heuristic score matrix based on penalty-based scoring and adaptive scaling
    penalty_factor = 0.5  # Adjust as needed
    scaled_distance = current_distance_matrix / torch.max(current_distance_matrix)
    capacity_penalty = (delivery_node_demands - current_load) / delivery_node_demands
    time_penalty = torch.max(arrival_times - time_windows[:, 1].unsqueeze(0), torch.zeros_like(arrival_times))
    duration_penalty = current_length / torch.max(current_length)

    heuristic_scores = scaled_distance - penalty_factor * (capacity_penalty + time_penalty + duration_penalty)

    return heuristic_scores
```
