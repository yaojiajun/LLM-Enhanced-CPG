```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Calculate penalization factor for infeasible nodes
    penalization_factor = torch.where(current_load < delivery_node_demands, -1, 0)
    
    # Introduce enhanced randomness with fine-tuned perturbations
    heuristic_scores = torch.randn_like(current_distance_matrix) * 0.5 + penalization_factor
    
    return heuristic_scores
```
