```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    # Calculate feasibility indicators
    capacity_feasibility = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    open_capacity_feasibility = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0)).float()
    duration_feasibility = (current_length.unsqueeze(1) >= current_distance_matrix).float()
    
    # Calculate time window feasibility
    arrival_after_earliest = (arrival_times.unsqueeze(1) <= time_windows[:, 0].unsqueeze(0)).float()
    arrival_before_latest = (arrival_times.unsqueeze(1) >= time_windows[:, 1].unsqueeze(0)).float()
    time_window_feasibility = arrival_after_earliest * arrival_before_latest
    
    # Compute distance penalties & rewards
    distance_penalty = -current_distance_matrix  # Negative as we want to minimize distance
    capacity_penalty = 1 + 10 * (1 - capacity_feasibility)  # Heavier penalty if capacity is exceeded
    duration_penalty = 1 + 10 * (1 - duration_feasibility)  # Penalty if duration exceeded
    time_window_penalty = 1 + 10 * (1 - time_window_feasibility)  # Penalty if time windows are violated
    
    # Environmental randomization: Exponential random variable for edge selection randomness
    rand_factors = torch.poisson(torch.ones_like(current_distance_matrix) * 0.5)

    # Compute heuristic scores
    heuristic_scores = distance_penalty + capacity_penalty + duration_penalty + time_window_penalty + rand_factors
    
    # Eliminate illegal edges by scaling scores to negative where a condition fails
    final_scores = heuristic_scores * (capacity_feasibility & open_capacity_feasibility & duration_feasibility & time_window_feasibility)

    return final_scores
```
