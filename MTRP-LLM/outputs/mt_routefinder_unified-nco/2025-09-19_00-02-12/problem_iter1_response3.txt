```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Implementing a more complex heuristic calculation involving a combination of distance, load, time windows, pickup demands, and route duration constraints
    heuristic_scores = torch.zeros_like(current_distance_matrix)

    # Example of a more sophisticated heuristic calculation
    # Calculating scores based on combination of factors
    distance_score = current_distance_matrix / torch.max(current_distance_matrix)
    delivery_demands_score = delivery_node_demands / (current_load + 1e-6)  # adding small epsilon to avoid division by zero
    pickup_demands_score = pickup_node_demands / (current_load_open + 1e-6)
    time_window_score = (arrival_times - time_windows[:, 1].unsqueeze(0)) / (time_windows[:, 1] - time_windows[:, 0] + 1e-6)
    length_score = current_length / torch.max(current_length)

    # Combining individual scores with weights to form final heuristic scores
    final_scores = 0.4 * distance_score + 0.1 * delivery_demands_score - 0.2 * pickup_demands_score - 0.3 * time_window_score + 0.5 * length_score

    return final_scores

```
