```python
import torch
import torch.nn.functional as F
import torch.distributions as distributions

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Calculate pairwise product of current_load and current_length
    load_length_product = torch.einsum('i,j->ij', current_load, current_length)
    
    # Apply some operations using current parameters (arbitrary for illustration purposes)
    score_matrix = current_distance_matrix * load_length_product
    
    # Introduce randomness with a Gaussian distribution
    noise = distributions.Normal(0, 0.1).sample(score_matrix.shape)
    score_matrix += noise

    return score_matrix
```
