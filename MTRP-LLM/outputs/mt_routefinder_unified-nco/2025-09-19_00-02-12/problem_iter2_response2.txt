```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Initialize heuristic scores
    pomo_size, N_plus_1 = current_distance_matrix.shape
    heuristic_scores = torch.zeros((pomo_size, N_plus_1), device=current_distance_matrix.device)
    
    # Compute time window penalties
    current_time = arrival_times[:, None]  # Reshape to (pomo_size, 1)
    earliest_windows = time_windows[:, 0]  # Earliest time windows
    latest_windows = time_windows[:, 1]  # Latest time windows
    
    # Calculate time window penalties
    time_window_penalty = torch.where(current_time < earliest_windows[None, :], 
                                       earliest_windows[None, :] - current_time,
                                       torch.where(current_time > latest_windows[None, :], 
                                                    current_time - latest_windows[None, :], 
                                                    torch.zeros_like(current_time)))
    
    # Compute load feasibility
    load_feasibility = (current_load[:, None] >= delivery_node_demands[None, :]) & (current_load[:, None] >= pickup_node_demands[None, :])
    
    # Compute remaining length feasibility
    length_feasibility = current_length[:, None] >= current_distance_matrix
    
    # Combine scores
    feasibility_score = (load_feasibility & length_feasibility).float()
    heuristic_scores += feasibility_score * 100  # Encourage feasible moves

    # Apply time window penalties negatively
    heuristic_scores -= time_window_penalty * 10  # Penalize based on time window violations

    # Introduce randomness to avoid local optima
    random_factor = torch.rand_like(heuristic_scores) * 0.05  # Small random noise
    heuristic_scores += random_factor
    
    return heuristic_scores
```
