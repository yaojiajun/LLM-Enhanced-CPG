```python
import torch
import torch.nn.functional as F

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Calculate heuristic score based on various constraints and information
    load_scores = torch.relu(current_load.unsqueeze(2) - delivery_node_demands)  # Scores based on load constraints
    open_load_scores = torch.relu(current_load_open.unsqueeze(2) - delivery_node_demands_open)  # Scores based on remaining open load constraints
    time_scores = torch.relu((arrival_times - time_windows[:, 1]).unsqueeze(1))  # Scores for violating time windows
    pickup_scores = torch.relu(current_load.unsqueeze(2) - pickup_node_demands)  # Scores based on pickup load constraints

    # Combine the scores with weights to form the final heuristic score matrix
    heuristic_scores = 0.5 * load_scores + 0.25 * open_load_scores + 0.15 * time_scores + 0.1 * pickup_scores
    
    return F.normalize(heuristic_scores, p=2, dim=1)
```
