```python
import torch
import torch.nn.functional as F
import torch.distributions as distributions

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    pomo_size, N = current_distance_matrix.size(0), current_distance_matrix.size(1)-1

    # Compute random heuristic scores with enhanced randomness
    random_scores = torch.tensor(distributions.beta.Beta(0.5, 0.5).sample((pomo_size, N+1)))

    # Scale scores based on various constraints and indicator values
    constraints_weights = torch.cat([(1 / delivery_node_demands), (1 / pickup_node_demands), (1 / current_length)], dim=0)  # Concatenate delivery demand, pickup demand, and duration constraints
    scaled_scores = F.normalize(random_scores * constraints_weights.unsqueeze(0), p=1, dim=1)

    return scaled_scores
```  
