```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Initialize heuristic scores
    heuristic_scores = torch.zeros_like(current_distance_matrix)

    # Capacity feasibility (should not exceed current load)
    capacity_feasibility_delivery = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    capacity_feasibility_pickup = (current_load_open.unsqueeze(1) >= pickup_node_demands.unsqueeze(0)).float()

    # Time window feasibility
    current_time = arrival_times
    time_window_feasibility = ((current_time.unsqueeze(1) >= time_windows[:, 0].unsqueeze(0)) &
                                (current_time.unsqueeze(1) <= time_windows[:, 1].unsqueeze(0))).float()

    # Calculate heuristic scores based on the distance and constraints
    distance_score = 1 / (current_distance_matrix + 1e-10)  # Inverse of distance (smaller is better)
    heuristic_scores += distance_score * capacity_feasibility_delivery * time_window_feasibility
    heuristic_scores += distance_score * capacity_feasibility_pickup * time_window_feasibility

    # Introduce randomness based on node characteristics
    random_factor = torch.rand_like(heuristic_scores) * 0.1  # Adjust noise level as needed
    heuristic_scores += random_factor

    # Constraint penalties (negative scoring for infeasible routes)
    heuristic_scores *= (capacity_feasibility_delivery + capacity_feasibility_pickup + time_window_feasibility)

    return heuristic_scores
```
