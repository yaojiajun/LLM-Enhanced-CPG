```python
import torch
import torch.nn.functional as F

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Compute heuristic score matrix based on a combination of delivery demands, current load, time windows, and remaining route length
    demand_factor = F.relu(delivery_node_demands - current_load)
    open_demand_factor = F.relu(delivery_node_demands_open - current_load_open)
    time_window_scores = 1 - ((arrival_times[:, :, None] < time_windows[:, 0]) | (arrival_times[:, :, None] > time_windows[:, 1])).float()
    length_factor = F.relu(pickup_node_demands - current_length)

    # Combine all factors to compute heuristic score matrix
    heuristic_scores = demand_factor + open_demand_factor + time_window_scores + length_factor

    return heuristic_scores
```
