```python
import torch
import torch.nn.functional as F

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Combine multiple factors to compute heuristic score
    load_diff = (delivery_node_demands - current_load) / current_load
    load_open_diff = (delivery_node_demands_open - current_load_open) / current_load_open
    wait_time = F.relu(arrival_times - time_windows[:, 1].unsqueeze(0))  # Penalize for exceeding time windows, threshold to 0 using ReLU
    delay_penalty = torch.sum(torch.max(pickup_node_demands - current_load, torch.zeros_like(current_load)), dim=0)

    # Calculate total heuristic score
    heuristic_score = 0.5 * load_diff + 0.3 * load_open_diff - 0.5 * wait_time + 0.2 * delay_penalty

    return heuristic_score

```
