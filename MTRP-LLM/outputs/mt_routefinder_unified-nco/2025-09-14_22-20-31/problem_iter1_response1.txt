```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Heuristic score initialization
    score_matrix = torch.zeros_like(current_distance_matrix, dtype=torch.float32)

    # Availability masks for feasiblity
    load_mask = ((current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)) & 
                  (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0)))
    length_mask = (current_length.unsqueeze(1) >= current_distance_matrix)
    time_mask = (arrival_times.unsqueeze(1) <= time_windows[:, 1] and 
                 arrival_times.unsqueeze(1) + current_distance_matrix <= time_windows[:, 1])

    # Combined feasibility mask
    feasibility_mask = load_mask & length_mask & time_mask

    # Basic score for feasible routes inversely proportional to distance
    base_scores = torch.where(feasibility_mask, 1.0 / (current_distance_matrix + 1e-5), torch.tensor(-float('inf')))
    
    # Adding penalty for infeasibility and adding randomness factor to avoid local optima
    random_factor = torch.rand_like(base_scores) * 0.1
    heuristic_scores = base_scores + random_factor

    # Apply final score only to feasible paths, otherwise preserve negative infinite
    score_matrix[~feasibility_mask] = heuristic_scores[~feasibility_mask]
    score_matrix[feasibility_mask] = heuristic_scores[feasibility_mask]

    return score_matrix
```
