```python
import torch
import torch.nn.functional as F

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Calculate adjusted distances by incorporating load and time window constraints
    adjusted_distances = current_distance_matrix + 0.1 * (1 - F.elu(current_load / delivery_node_demands)) + 0.1 * (1 - F.elu(current_length / current_distance_matrix))
    
    # Introduce randomness by adding noise to distances
    noisy_distances = adjusted_distances + torch.randn_like(adjusted_distances) * 0.01

    return noisy_distances
```  
