```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Calculate potential for delivery feasibility meeting demand constraints
    load_satisfaction = (current_load.unsqueeze(-1) >= delivery_node_demands[None, :]).float()
    load_satisfaction_open = (current_load_open.unsqueeze(-1) >= delivery_node_demands_open[None, :]).float()

    # Calculate time window satisfaction
    time_feasibility = ((arrival_times + current_distance_matrix) >= time_windows[:, 0][None, :]) & \
                       ((arrival_times + current_distance_matrix) <= time_windows[:, 1][None, :])
    time_feasibility = time_feasibility.float()
    
    # Calculate route length feasibility
    length_feasibility = (current_length.unsqueeze(-1) >= current_distance_matrix).float()

    # Combined feasibility score weighted by parameters (can introduce enhanced randomness as perturbation)
    random_noise = torch.rand_like(current_distance_matrix) * 0.1  # Introducing randomness
    base_score = (load_satisfaction * time_feasibility * length_feasibility) + random_noise
    
    # Creating an overall heuristics score matrix penalizing infeasibility
    infeasible_penalty = -100 * (1 - (load_satisfaction * time_feasibility * length_feasibility))
    heuristic_scores = base_score + infeasible_penalty

    return heuristic_scores
```
