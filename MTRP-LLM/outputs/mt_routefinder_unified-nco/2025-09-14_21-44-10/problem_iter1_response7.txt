```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    # Initialize scores with large negative values
    score_matrix = -torch.ones_like(current_distance_matrix)

    # Calculate feasible deliverable areas based on capacity limitations
    deliverable = (current_load.unsqueeze(-1) >= delivery_node_demands[:-1]) & (current_load_open.unsqueeze(-1) >= delivery_node_demands_open[:-1])
    
    # Check the time window feasibility
    time_in_window = (arrival_times + current_distance_matrix < time_windows[:, 1].unsqueeze(0)) & (arrival_times + current_distance_matrix > time_windows[:, 0].unsqueeze(0))
    
    # Combine both conditions
    feasible = deliverable & time_in_window

    # Update scores for feasible paths with adjusted based on the distance
    score_matrix[feasible] = -current_distance_matrix[feasible]  # Inverse of distance for minimization

    # Penalize nodes that exceed current route length or can't accommodate the collection of pickups
    excess_length_mask = (current_length.unsqueeze(-1) < current_distance_matrix)
    pickup_capacity_issue = (current_load_open.unsqueeze(-1) < pickup_node_demands[:-1]) & (pickup_node_demands[:-1] > 0)

    # Adjust scores negatively for exceeding length and pickup limits
    score_matrix[excess_length_mask | pickup_capacity_issue] = float('-inf')

    # Introduce some randomness to avoid local optima
    random_noise = torch.rand_like(score_matrix) * 0.05  # Small random noise
    score_matrix += random_noise

    # Set paths that lead back to the depot to neutral score to encourage open routing
    score_matrix[:, 0] = 0  
    
    return score_matrix
```
