```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    # Initialize the heuristic score matrix
    heuristic_scores = torch.zeros_like(current_distance_matrix)
    
    # Compute initial feasibility by remaining capacity constraints (delivery and pickup)
    is_deliverable = (current_load.unsqueeze(1) >= delivery_node_demands_o.unsqueeze(0)) & (current_load_open.unsqueeze(1) >= delivery_node_demands.unsqueeze(0))
    
    # Feasible nodes gleaned from time window alignment
    window_valid = (arrival_times.unsqueeze(1) <= time_windows[:, 1].unsqueeze(0)) & (arrival_times.unsqueeze(1) + current_distance_matrix <= time_windows[:, 0].unsqueeze(0))
    
    # Update heuristic scores based on feasibility
    heuristic_scores[is_deliverable] += 10
    heuristic_scores[window_valid] += 5
    
    # An additional random factor for exploration
    random_factor = torch.rand_like(heuristic_scores) * 5
    heuristic_scores += random_factor
    
    # Modify scores considering logistics by current length limits (lower scores for dist longer than permitted)
    length_constraints = (current_length.unsqueeze(1) - current_distance_matrix) >= 0
    heuristic_scores[length_constraints] += 3
    
    # Apply a negative impact for capped or unfriendly distances (long distances due to penalty also)
    # Activate penalizing higher distances
    distance_penalty_threshold = current_distance_matrix > current_length.unsqueeze(1)
    heuristic_scores[distance_penalty_threshold] -= 20

    return heuristic_scores
```
