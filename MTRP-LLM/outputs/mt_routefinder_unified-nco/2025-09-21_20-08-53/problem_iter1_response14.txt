```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores_v2
    # Compute the inverted distance-based heuristic score matrix with added controlled randomness
    inverted_distance_scores = 1 / (current_distance_matrix + 1e-8) - torch.randn_like(current_distance_matrix) * 0.5

    # Compute the demand-based heuristic score matrix with increased randomness
    demand_scores_v2 = (delivery_node_demands.unsqueeze(0) + current_load.unsqueeze(1)) * 0.9 + torch.min(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.3

    # Introduce controlled randomness and magnitudes for exploration in diverse noise patterns
    enhanced_noise_v2 = torch.randn_like(current_distance_matrix) * 3.0

    # Combine the different heuristic scores with a focus on demand and exploration
    cvrp_scores_v2 = inverted_distance_scores + demand_scores_v2 + enhanced_noise_v2

    # Other parts of the function remain the same as the original heuristics function

    # Extract the time window boundaries for vrptw_scores calculation
    earliest_times = time_windows[:, 0].unsqueeze(0)
    latest_times = time_windows[:, 1].unsqueeze(0)

    # Calculate waiting times for early arrivals for vrptw_scores
    waiting_times = torch.clamp(earliest_times - arrival_times, min=0)

    # More modifications can be done in a similar fashion for the remaining parts as required by the task

    overall_scores_v2=cov_scores_v2+atetime_scores+jewto_scores+vhitv_scores_ou
    
    return overall_scores_v2
```
