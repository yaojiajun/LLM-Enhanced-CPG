```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores (Modified)
    # Update the normalized distance-based heuristic score matrix with different weights and no randomness
    normalized_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) * 0.5

    # Compute the demand-based heuristic score matrix with different scaling and emphasis exclusively on available capacity
    demand_scores =  (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.6

    # Introduce a weighted trade-off between distance and demand scores
    cvrp_scores = normalized_distance_scores + demand_scores

    # Remain vrptw_scores, vrpb_scores, vrpl_scores, ovrp_scores calculation unchanged
    ...

    overall_scores=cvrp_scores+vrptw_scores+vrpb_scores+vrpl_scores+ovrp_scores

    return overall_scores
```
