```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Calculate the normalized distance-based heuristic score matrix with different noise level
    normalized_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(current_distance_matrix) * 0.5

    # Adjust the demand-based heuristic score for current load and manipulate the randomness
    delivery_score = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.7 + torch.max(delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.8

    # Introduce enhanced noise for exploration
    enhanced_noise = torch.randn_like(current_distance_matrix) * 1.5

    # Combine the heuristic scores with diverse strategies for exploration
    total_scores = normalized_distance_scores + delivery_score + enhanced_noise

    return total_scores
```
