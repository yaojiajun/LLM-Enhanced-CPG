```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # cvrp_scores (Modified)
    # Apply a modified version of the distance-based heuristic score matrix
    modified_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.6 + (current_load / torch.max(current_load)).unsqueeze(1)

    # Compute the demand-based heuristic score matrix with similar influence as in v1
    demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.8 + torch.max(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    # Introduce increased randomness for exploration with higher noise level similar to v1
    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0

    # Combine the modified heuristic scores with previously used diversified strategies for balanced exploration
    cvrp_scores = modified_distance_scores + demand_scores + enhanced_noise

    # Logic for other heuristics remains the same as in heuristics_v1

    return overall_scores
```
