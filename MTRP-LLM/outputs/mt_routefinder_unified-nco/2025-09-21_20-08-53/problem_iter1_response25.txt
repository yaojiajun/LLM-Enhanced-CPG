```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Customized computation for adaptation and diversity
    inverted_distance_scores = 1.0 / (current_distance_matrix + 1e-8)  # Inverted distances for high score for low distances

    # Computing additional demand-based scores scaled by current load and element-wise multiplication
    demands_scaled = delivery_node_demands * 0.5
    additional_demand_scores = demands_scaled.unsqueeze(0) * current_load.unsqueeze(1)

    # Combine inverted distances and demand-based scores for the total score matrix
    custom_v2_scores = inverted_distance_scores + additional_demand_scores

    # Rest of the code remains unchanged

    normalized_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(
         current_distance_matrix) * 0.7
     
    demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.8 + torch.max(
         delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5
     
    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0
     
    cvrp_scores = normalized_distance_scores + demand_scores + enhanced_noise

    earliest_times = time_windows[:, 0].unsqueeze(0)
    latest_times = time_windows[:, 1].unsqueeze(0)

    waiting_times = torch.clamp(earliest_times - arrival_times, min=0)
    late_arrivals = torch.clamp(arrival_times - latest_times, min=0)
    criticality_weights = torch.where(late_arrivals > 0, 1.7, 0.3)

    time_compensation = criticality_weights * (waiting_times + late_arrivals)
    
    vrptw_scores = time_compensation
 
    vehicle_capacity = 100.0

    non_zero_demands = pickup_node_demands > 0
    
    used_capacity = torch.sum(pickup_node_demands.unsqueeze(0) * non_zero_demands.float(), dim=1)
    remaining_capacity = vehicle_capacity - used_capacity.unsqueeze(1)
    
    vrpb_compensation = torch.where(
         non_zero_demands,
         (remaining_capacity - pickup_node_demands) * non_zero_demands.float(),
         torch.zeros_like(cvrp
