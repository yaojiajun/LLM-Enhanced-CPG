```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # New computation for current_distance_matrix heuristic scores
    normalized_distance_scores = (-current_distance_matrix / torch.max(current_distance_matrix)) * torch.randn_like(current_distance_matrix) * 0.9

    # Keep the delivery_based score computation unchanged
    demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.8 + torch.max(delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    # Introduce different noise factor 
    enhanced_noise = torch.randn_like(current_distance_matrix) * 1.5
    demand_scores += enhanced_noise

    # Combine the different heuristic scores with diversified strategies for balanced exploration
    overall_scores = normalized_distance_scores + demand_scores

    # Copy the original calculation for remaining parts like vrptw_scores, vrpb_scores, vrpl_scores, and ovrp_scores from the previous version
    
    return overall_scores
```  
