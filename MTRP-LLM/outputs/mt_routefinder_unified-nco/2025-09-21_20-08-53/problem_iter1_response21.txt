```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Modified calculations for distance-based heuristic and demand-based heuristic
    # Updated distance-based heuristic using inverse of the distance and randomized variant
    distance_scores = -1 / torch.abs(current_distance_matrix) + torch.randn_like(current_distance_matrix) * 0.6

    # Updated demand-based heuristic with dynamic adjustment for demand and load ratios
    demand_scores = (4 * delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) + torch.max(delivery_node_demands) / 3 + torch.randn_like(current_distance_matrix) * 0.4

    # Keep the other parts of the function identical to the original version for consistency
    # Combine with existing heuristics for balanced exploration
    overall_scores = distance_scores + demand_scores

    return overall_scores
```  
