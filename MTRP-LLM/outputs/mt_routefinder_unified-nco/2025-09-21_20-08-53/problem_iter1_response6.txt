```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Tweaked version based on seed code adjustments for distance, delivery, and load
    normalized_distance_scores = -current_distance_matrix / 2 * torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.7

    delivery_score = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 2 + torch.max(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 1

    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.5

    cvrp_scores = normalized_distance_scores + delivery_score + enhanced_noise

    demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.3 + torch.max(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    criticality_weights = torch.where(late_arrivals > 0, 1.5, 0.6)

    vrptw_scores = time_compensation * criticality_weights

    vehicle_capacity = 150.0

    used_capacity = torch.sum(pickup_node_demands.unsqueeze(0) * non_zero_demands.float(), dim=1)

    remaining_capacity = vehicle_capacity - used_capacity.unsqueeze(1)

    vrpb_scores = torch.clamp(((remaining_capacity - pickup_node_demands) * non_zero_demands.float()), min=0)

    last_length = current_length[:, -1].unsqueeze(1)

    feasible_mask = (last_length > 10)

    vrpl_compensation = torch.where(feasible_mask, 1 / (last_length + 1e-6), torch.zeros_like(last_length))

    vrpl_scores = vrpl_compensation

    ovrp_scores = 10 * torch.randn_like(cvrp_scores)

    overall_scores = cvrp_scores + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores

    return overall_scores
```
