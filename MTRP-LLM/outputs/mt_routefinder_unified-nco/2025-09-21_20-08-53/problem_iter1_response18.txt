```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores
    # New way to compute distance-based heuristic score matrix with added diversity through randomness
    normalized_distance_scores = -1 / (current_distance_matrix + 1e-8) + torch.randn_like(
        current_distance_matrix) * 0.3

    # New way to calculate demand scores with emphasis on high-demand nodes and enhanced randomness
    demand_scores = (delivery_node_demands.unsqueeze(0) - 2*current_load.unsqueeze(1)) * 0.5 + torch.max(
        delivery_node_demands) / 3 + 0.7 * torch.randn_like(current_distance_matrix)

    # Introduce increased randomness with enhanced noise for exploration with higher noise level
    enhanced_noise = torch.randn_like(current_distance_matrix) * 1.5

    # Combine the different heuristic scores with new diversified strategies for balanced exploration
    cvrp_scores = normalized_distance_scores + demand_scores + enhanced_noise
    
    # Retaining the logic and calculations related to other inputs unchanged from the original function

    return cvrp_scores
```
