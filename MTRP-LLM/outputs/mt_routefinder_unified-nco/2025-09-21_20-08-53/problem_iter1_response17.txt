```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores_updated
    # Compute the revised normalized distance-based heuristic score matrix with added diversity through randomness
    normalized_distance_scores_updated = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.7

    # Compute the updated demand-based heuristic score matrix with emphasis on high-demand nodes and enhanced randomness
    demand_scores_updated = (torch.sqrt(delivery_node_demands.unsqueeze(0)) - current_load.unsqueeze(1)) * 0.5 + torch.max(
        delivery_node_demands) + torch.randn_like(current_distance_matrix) * 0.3

    # Combine the different updated heuristic scores with diversified strategies for balanced exploration
    cvrp_scores_updated = normalized_distance_scores_updated + demand_scores_updated

    # Remain other heuristic score calculations unchanged
    ...
    return overall_scores
```
