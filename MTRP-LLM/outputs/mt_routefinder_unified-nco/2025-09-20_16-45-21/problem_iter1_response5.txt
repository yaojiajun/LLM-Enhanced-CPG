```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Constants
    EPSILON = 1e-8
    BATCH_SIZE, N = current_distance_matrix.shape

    # Check feasibility for delivery and pickup regarding load capacity
    delivery_capacity_penalty = (delivery_node_demands.unsqueeze(0) > (current_load.unsqueeze(1) + EPSILON)).float() * float('-inf')
    pickup_capacity_penalty = (pickup_node_demands.unsqueeze(0) > (current_load_open.unsqueeze(1) + EPSILON)).float() * float('-inf')

    # Time window constraints
    earliest_times = time_windows[:, 0]
    latest_times = time_windows[:, 1]
    is_within_time_window = (
        (arrival_times.unsqueeze(1) >= earliest_times.unsqueeze(0)) &
        (arrival_times.unsqueeze(1) <= latest_times.unsqueeze(0))
    ).float()

    time_window_penalty = (1 - is_within_time_window) * float('-inf')

    # Current length/time dilution to Plane_demand effectiveness
    length_violation_score = - (current_length.unsqueeze(1) - current_distance_matrix) / (current_length.unsqueeze(1) + EPSILON)

    # Compute heuristic scores combining the penalties and viability offsets
    scores = current_distance_matrix + length_violation_score + delivery_capacity_penalty + pickup_capacity_penalty + time_window_penalty

    # Controlled randomness to aid in exploration (encouraging diversity)
    random_factor = torch.rand(BATCH_SIZE, N + 1) * 1e-2
    scores += random_factor

    # Clamping the values to remove unfeasible scores exceeding certain thresholds
    finite_scores = torch.clamp(scores, min=float('-inf'), max=1e6)

    # Filter out scores not adhering to defined parameters
    heuristic_scores = torch.where(torch.isfinite(finite_scores), finite_scores, float('-inf'))

    return heuristic_scores
```
