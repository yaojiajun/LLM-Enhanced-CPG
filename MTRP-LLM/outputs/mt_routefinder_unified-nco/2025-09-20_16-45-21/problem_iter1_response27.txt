```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
                    
    epsilon = 1e-8
    pomo_size, num_nodes = current_distance_matrix.shape

    # Calculate the feasible demand constraints based on current load
    remaining_capacity = current_load.unsqueeze(1) - delivery_node_demands.unsqueeze(0)
    demand_mask = (remaining_capacity >= 0).float()

    # Implement time window constraints
    earliest_arrival = time_windows[:, 0].unsqueeze(0)
    latest_arrival = time_windows[:, 1].unsqueeze(0)
    time_window_mask = ((arrival_times + current_distance_matrix) >= earliest_arrival) * \
                       ((arrival_times + current_distance_matrix) <= latest_arrival)

    # Incorporate open route constraints
    remaining_load_capacity_open = current_load_open.unsqueeze(1) - delivery_node_demands_open.unsqueeze(0)
    open_route_mask = (remaining_load_capacity_open >= 0).float()
    
    # Current length limitations
    length_mask = (current_length.unsqueeze(1) - current_distance_matrix) >= 0

    # Ensure feasibility based on all constraints
    feasible_routes = demand_mask * time_window_mask * open_route_mask * length_mask
       
    # Heuristic scoring criteria based on distance (higher distance could attract negative scores)
    heuristic_scores = -current_distance_matrix * feasible_routes
    
    # Incorporate controlled randomness to avoid local optima
    random_noise = torch.randn_like(heuristic_scores) * 0.01
    heuristic_scores += random_noise

    # Clamp scores to exclude any infinite values
    heuristic_scores[~((torch.isfinite(heuristic_scores)))] = -float('inf')

    return heuristic_scores
```
