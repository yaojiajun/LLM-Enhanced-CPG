```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    epsilon = 1e-8
    N = current_distance_matrix.shape[1]
    
    # Initialize heuristic score matrix with negative infinities
    heuristic_scores = torch.full((current_distance_matrix.shape[0], N), float('-inf'), device=current_distance_matrix.device)

    # Calculate deliveries feasibility
    delivery_feasible = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0) + epsilon)

    # Early arrival enforcement based on time windows
    on_time_arrival = (arrival_times.unsqueeze(1) >= time_windows[:,0].unsqueeze(0)) & (arrival_times.unsqueeze(1) <= time_windows[:,1].unsqueeze(0) + epsilon)

    # Check open route feasibility
    open_route_feasibility = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0) + epsilon)

    # Length constraint check
    duration_constraint = (current_length.unsqueeze(1) >= current_distance_matrix + epsilon)

    # Combine all feasibility conditions
    feasible_edges = delivery_feasible & on_time_arrival & open_route_feasibility & duration_constraint
    
    # Calculate the base score as inverted distance for feasible routes
    heuristic_base_scores = torch.where(feasible_edges, 1 / (current_distance_matrix + epsilon), torch.zeros_like(current_distance_matrix, device=current_distance_matrix.device))
    
    # Introduce randomness in the scoring to avoid local minima
    randomness = torch.rand_like(heuristic_base_scores) * 0.1  # Wide exploration factor
    heuristic_scores = heuristic_base_scores + randomness
    
    # Ensure all outputs are finite 
    heuristic_scores[~torch.isfinite(heuristic_scores)] = float('-inf')
    
    return heuristic_scores
```
