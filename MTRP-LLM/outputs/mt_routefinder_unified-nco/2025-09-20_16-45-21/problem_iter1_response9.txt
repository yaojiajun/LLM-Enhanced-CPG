```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:

    epsilon = 1e-8
    num_vehicles, num_nodes = current_distance_matrix.shape
    
    # Calculate demand-remaining capacity ratio with clamping
    demand_delivery_ratio = delivery_node_demands / (current_load.unsqueeze(1) + epsilon)
    demand_total_ratio = (delivery_node_demands + pickup_node_demands) / (current_load.unsqueeze(1) + epsilon)
    
    # Time window feasibility
    # service_time is considered base time spent in serving the node (considered as an addition to distance for heuristic purposes)
    service_time = current_distance_matrix + arrival_times.unsqueeze(1)
    time_feasibility = ((arrival_times.unsqueeze(1) + current_distance_matrix) <= time_windows[:, 1].unsqueeze(0)).float()
    
    # Avoid exceeding maximum travel time allowed during route
    length_check = (current_length.unsqueeze(1) - current_distance_matrix) > 0;

    # Controlled randomness for local optima avoidance (tweak 0.1 and 0.11 as needed to control randomness)
    randomness = torch.rand(num_vehicles, num_nodes) * 0.1 + 0.11

    # Compute scores:
    # Combining demand ratio, time feasibility, and length check with normalization
    heuristic_scores = (demand_delivery_ratio + demand_total_ratio) * time_feasibility * length_check * randomness

    # Ensure the scores are finite within constraints
    heuristic_scores = torch.clamp(heuristic_scores, min=0)  # Only allow positive scores for valid moves
    heuristic_scores[~length_check] = float('-inf')  # Set infeasibility to negative inf
    
    return heuristic_scores
```
