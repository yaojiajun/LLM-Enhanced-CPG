```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    epsilon = 1e-8
    max_distance = torch.max(current_distance_matrix).item()

    # Calculate feasibility for delivery
    delivery_feasibility = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    
    # Time window constraints
    current_time_unsqueezed = arrival_times.unsqueeze(2) + current_distance_matrix.unsqueeze(1)
    time_window_feasibility = ((current_time_unsqueezed >= time_windows[:, :, 0].unsqueeze(0).unsqueeze(0)) & 
                                (current_time_unsqueezed <= time_windows[:, :, 1].unsqueeze(0).unsqueeze(0))).float()

    # Calculate adjusted loads and limits
    adjusted_load = torch.where(delivery_feasibility > 0, 
                                 current_load.unsqueeze(1) - delivery_node_demands.unsqueeze(0),
                                 torch.full_like(current_load.unsqueeze(1), float('inf')))
    
    # Handling open-route demands
    open_route_feasibility = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0)).float()
    
    # Calculate total route length limit bonuses
    length_constraints = (current_length.unsqueeze(1) >= current_distance_matrix).float()

    # Randomness to escape local optima
    randomness = torch.rand_like(current_distance_matrix) * 0.01

    # Heuristic scoring
    score_matrix = ((delivery_feasibility * time_window_feasibility * length_constraints) / 
                    (adjusted_load + epsilon)) + randomness

    # Apply masks to ensure only valid scores are considered, clamp to finite range
    score_matrix[score_matrix == float('inf')] = max_distance
    score_matrix[score_matrix == -float('inf')] = -max_distance
    score_matrix[torch.isnan(score_matrix)] = 0

    return score_matrix
```
