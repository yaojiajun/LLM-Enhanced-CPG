```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:

    # Constants
    epsilon = 1e-8
    num_vehicles, num_nodes = current_distance_matrix.shape

    # Initialize the heuristic score matrix with zero
    heuristic_scores = torch.zeros((num_vehicles, num_nodes), device=current_distance_matrix.device)

    # Capacity constraint for deliveries
    delivery_capacity_mask = (current_load.unsqueeze(-1) >= delivery_node_demands.unsqueeze(0)).float()
    
    # Open route feasibility check for deliveries
    open_route_capacity_mask = (current_load_open.unsqueeze(-1) >= delivery_node_demands_open.unsqueeze(0)).float()
    
    # Time window constraints
    time_windows_mask = ((arrival_times.unsqueeze(-1) + current_distance_matrix <= time_windows[:, 1].unsqueeze(0)).float() *
                         (arrival_times.unsqueeze(-1) + current_distance_matrix >= time_windows[:, 0].unsqueeze(0)).float())
    
    # Duration limit constraint
    duration_limit_mask = (current_length.unsqueeze(-1) >= current_distance_matrix + epsilon).float()

    # Combine the masks
    feasibility_mask = delivery_capacity_mask * open_route_capacity_mask * time_windows_mask * duration_limit_mask

    # Calculate raw heuristic scores based on distance
    distance_scores = 1 / (current_distance_matrix + epsilon)
    heuristic_scores = feasibility_mask * distance_scores

    # Add randomness to avoid local minima
    random_noise = torch.FloatTensor(num_vehicles, num_nodes).uniform_(-0.01, 0.01).to(current_distance_matrix.device)
    heuristic_scores += random_noise

    # Mask out non-finite values
    heuristic_scores[~torch.isfinite(heuristic_scores)] = 0
    
    return heuristic_scores
```
