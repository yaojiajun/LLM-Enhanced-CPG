```python
import torch

def heuristics_v2(
    current_distance_matrix: torch.Tensor,
    delivery_node_demands: torch.Tensor,
    current_load: torch.Tensor,
    delivery_node_demands_open: torch.Tensor,
    current_load_open: torch.Tensor,
    time_windows: torch.Tensor,
    arrival_times: torch.Tensor,
    pickup_node_demands: torch.Tensor,
    current_length: torch.Tensor
) -> torch.Tensor:

    EPSILON = 1e-8
    N = current_distance_matrix.size(1) - 1
    pomo_size = current_distance_matrix.size(0)

    # Step 1: Calculate basic feasibility scores
    feasible_delivery = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0))
    feasible_open = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0))
    
    # Step 2: Calculate time window feasibility
    current_time_window = (arrival_times.unsqueeze(1) + current_distance_matrix)
    valid_time = (current_time_window >= time_windows[:, 0].unsqueeze(0)) & (current_time_window <= time_windows[:, 1].unsqueeze(0))
    
    # Step 3: Calculate capacity and time constraints
    valid_score = feasible_delivery & valid_time & feasible_open
    
    # Step 4: Create a base score using the distance matrix 
    distance_score = -current_distance_matrix.clone()  # Negative because we want to minimize
    distance_score[~valid_score] = float('-inf')        # Infeasible edges to -inf

    # Step 5: Incorporate randomness for search exploration
    randomness = torch.rand(pomo_size, N + 1, device=current_distance_matrix.device)
    
    # Adjusting numerical stability
    length_score = ((current_length.unsqueeze(1) - current_distance_matrix) + EPSILON).clamp(min=0)
    length_score[~valid_score] = float('-inf')
    
    optimized_scores = distance_score + length_score + randomness

    # Step 6: Ensure only valid, finite scores
    optimized_scores = torch.where(torch.isfinite(optimized_scores), optimized_scores, torch.tensor(float('-inf'), device=current_distance_matrix.device))
    
    return optimized_scores
```
