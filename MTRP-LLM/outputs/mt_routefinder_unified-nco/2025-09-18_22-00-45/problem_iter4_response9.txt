```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Compute heuristic scores based on domain-specific insights and enhanced randomness
    randomness_factor = 0.1  # Adjust the randomness factor based on problem characteristics
    distance_scores = torch.rand_like(current_distance_matrix)  # Example random distance scores
    demand_scores = torch.zeros_like(delivery_node_demands)  # Initialize demand scores
    time_scores = torch.randn_like(arrival_times)  # Random time scores with both positive and negative values
    pickup_scores = torch.rand_like(pickup_node_demands)  # Example random pickup scores
    
    # Incorporate domain-specific insights into demand scores computation
    for i in range(delivery_node_demands.size(0)):
        if current_load[i] >= delivery_node_demands[i]:
            demand_scores[i] = current_load[i] - delivery_node_demands[i]
        else:
            demand_scores[i] = -1  # Penalize infeasible nodes

    heuristics_scores = distance_scores + (1 - randomness_factor) * demand_scores - randomness_factor * time_scores + pickup_scores
    return heuristics_scores
```
