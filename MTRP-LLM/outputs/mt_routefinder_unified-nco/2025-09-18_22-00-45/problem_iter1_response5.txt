```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Calculate normalized distances
    normalized_distances = current_distance_matrix / torch.max(current_distance_matrix)
    
    # Calculate load feasibility
    load_feasibility = torch.min((current_load - delivery_node_demands) >= 0, (current_load_open - delivery_node_demands_open) >= 0)
    
    # Calculate time window feasibility
    service_time_window = time_windows[:, 0] + arrival_times
    time_window_feasibility = torch.min(service_time_window <= time_windows[:, 1], service_time_window >= time_windows[:, 0])
    
    # Combine feasibility indicators
    heuristics_score = normalized_distances * load_feasibility * time_window_feasibility
    
    return heuristics_score

```
