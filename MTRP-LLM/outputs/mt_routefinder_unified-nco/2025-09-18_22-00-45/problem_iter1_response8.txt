```python
import torch
import torch.nn.functional as F

def heuristics_v2(current_distance_matrix, delivery_node_demands, current_load, delivery_node_demands_open, current_load_open, time_windows, arrival_times, pickup_node_demands, current_length):
    # Compute score matrix based on various constraints and factors
    delivery_demands_ratio = delivery_node_demands / (current_load + 1)  # Ratio of delivery demands to remaining load
    time_windows_diff = time_windows[:, 1] - arrival_times[:, 1]  # Time window difference
    pickup_demands_ratio = pickup_node_demands / (current_load_open + 1)  # Ratio of pickup demands to remaining load

    # Combine different factors to form the heuristic score matrix
    heuristic_score = torch.stack([
        delivery_demands_ratio,
        time_windows_diff,
        pickup_demands_ratio,
        current_length
    ], dim=0)

    # Apply non-linear activation to introduce randomness and enhance exploration
    heuristic_score = F.sigmoid(heuristic_score)

    return heuristic_score

```
