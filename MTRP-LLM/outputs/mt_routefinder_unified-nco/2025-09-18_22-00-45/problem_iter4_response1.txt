```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Compute heuristic scores based on domain-specific insights and enhanced randomness
    capacity_scores = torch.where((delivery_node_demands - current_load) > 0, torch.zeros_like(current_distance_matrix), torch.ones_like(current_distance_matrix))
    time_window_scores = torch.where((time_windows[:, 0] - arrival_times[:, :-1]) > 0, torch.zeros_like(current_distance_matrix), torch.ones_like(current_distance_matrix))
    pickup_capacity_scores = torch.where((pickup_node_demands - current_load_open) > 0, torch.zeros_like(current_distance_matrix), torch.ones_like(current_distance_matrix))
    
    heuristic_scores = capacity_scores + time_window_scores + pickup_capacity_scores + torch.randn_like(current_distance_matrix) * 0.1
    
    return heuristic_scores
```
