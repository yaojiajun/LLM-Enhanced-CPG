```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Modified version of heuristics function with a focus on different edge selection
    
    # Reversing the distance heuristic to reward closer nodes
    normalized_distance_scores = current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.7

    # Changing how demand scoing emphasizes high-demand nodes
    demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.5 + torch.max(
        delivery_node_demands) * 0.3 + torch.randn_like(current_distance_matrix) * 0.6

    # Introducing increased randomness in a different way
    diversified_noise = torch.randn_like(current_distance_matrix) + 0.5

    # Incorporating only the modified components
    total_scores_2 = normalized_distance_scores + demand_scores + diversified_noise

    return total_scores_2
```
