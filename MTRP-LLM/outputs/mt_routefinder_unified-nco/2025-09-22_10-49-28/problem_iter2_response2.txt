```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Modify the heuristic calculations related to current_distance_matrix, delivery_node_demands, and current_load

    # Generate a modified distance-based heuristic score matrix by considering the reciprocal of distances with randomness
    modified_distance_scores = -1 / current_distance_matrix + torch.randn_like(current_distance_matrix) * 0.3

    # Generate a modified demand-based heuristic score matrix with an emphasis on high-demand nodes and randomness
    modified_demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.5 - torch.max(
        delivery_node_demands) + torch.randn_like(current_distance_matrix) * 0.4

    # Calculate the overall score matrix for edge selection
    overall_scores = modified_distance_scores + modified_demand_scores

    return overall_scores
```
