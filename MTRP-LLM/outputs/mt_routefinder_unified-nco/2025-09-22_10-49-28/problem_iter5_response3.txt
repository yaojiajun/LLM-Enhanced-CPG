```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Generate a mutated version of the distance-based heuristic score matrix emphasizing load balancing and controlled randomness
    distance_heuristic = -1 * (current_distance_matrix ** 1.5) * 0.2 + torch.randn_like(current_distance_matrix) * 0.3
    
    # Generate a mutated version of the delivery score matrix focusing on remaining load and squared demand difference
    delivery_score = (current_load_open.unsqueeze(1) - delivery_node_demands.unsqueeze(0)) ** 2 * 0.6 + torch.randn_like(current_distance_matrix) * 0.2

    # Generate a modified version of the pickup score matrix to address load balancing
    pickup_score = torch.exp(current_load.unsqueeze(1) - pickup_node_demands.unsqueeze(0)) * 0.4 + torch.randn_like(current_distance_matrix) * 0.1

    # Calculate the overall score matrix for edge selection with appropriate scaling
    overall_scores = distance_heuristic + delivery_score + pickup_score

    return overall_scores
```
