```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Generate a mutation in the distance-based heuristic score matrix by adding noise and emphasizing shorter distances
    distance_heuristic = torch.exp(-0.5 * current_distance_matrix) + torch.randn_like(current_distance_matrix) * 0.2

    # Generate a modified demand-based heuristic score matrix by considering the inverse demand to prioritize high-demand nodes
    delivery_score = (torch.max(delivery_node_demands) / (delivery_node_demands + 1e-6)) * 0.6 + torch.randn_like(current_distance_matrix) * 0.2

    # Integrated total score matrix by balancing the modified distance and demand scores
    overall_scores = distance_heuristic + delivery_score

    return overall_scores
```
