```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores v2
    # Modified calculation for normalized_distance_scores to introduce variability based on vehicle load
    normalized_distance_scores = -(current_distance_matrix / torch.max(current_distance_matrix)) + (1 - current_load.unsqueeze(1) / torch.max(current_load)) + torch.randn_like(current_distance_matrix) * 0.7
    
    # demand_scores v2
    # Modified demand-based score calculation based on a combination of high-demand nodes and load proportion
    demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.8 + (1 - current_load.unsqueeze(1) / torch.max(current_load)) + torch.max(delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    # Continue computations for the existing heuristics
        
    # Introduce controlled randomness in scoring to avoid premature convergence to local optima
    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0

    # Combine the different heuristic scores with diversified strategies for balanced exploration
    cvrp_scores = normalized_distance_scores + demand_scores + enhanced_noise

    # vrptw_scores, vrpb_scores, vrpl_scores, ovrp_scores calculation remains the same as in 'heuristics_v1'

    overall_scores = cvrp_scores + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores

    return overall_scores
```  
