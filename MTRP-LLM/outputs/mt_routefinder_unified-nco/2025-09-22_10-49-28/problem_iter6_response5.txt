```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Generate an adjusted distance-based heuristic score matrix with added penalty based on distance and randomness
    adjusted_distance_scores = current_distance_matrix * 0.8 - ((current_distance_matrix ** 2) / 100) + torch.randn_like(current_distance_matrix) * 0.5

    # Generate a modified demand-based heuristic score matrix by considering relative load balance and random perturbations
    modified_demand_scores = (current_load.unsqueeze(1) - delivery_node_demands.unsqueeze(0).float()) * 0.7 + (torch.min(current_load) / 3) + torch.randn_like(current_distance_matrix) * 0.4

    # Calculate the overall score matrix for edge selection considering adjusted distance penalties and modified demand priorities
    overall_scores = adjusted_distance_scores + modified_demand_scores

    return overall_scores
```
