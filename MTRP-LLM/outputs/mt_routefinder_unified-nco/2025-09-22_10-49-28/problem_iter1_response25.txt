```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores
    distance_score = -current_distance_matrix / (torch.max(current_distance_matrix) + 1e-6)  # Normalizing distance score

    normalized_distance_scores = distance_score + torch.randn_like(current_distance_matrix) * 0.7  # Introduce randomness

    delivery_score = delivery_node_demands.unsqueeze(1) / (current_load.unsqueeze(1) + 1e-6)  # Delivery demand score
    demand_scores = delivery_score * 0.8 + torch.max(delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5  # Compute demand-based heuristic score

    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0

    cvrp_scores = normalized_distance_scores + demand_scores + enhanced_noise  # Combine different heuristic scores

    # Rest of the code stays the same as in the original function

    return overall_scores
```
