```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Modify the distance-based heuristic score matrix to focus on minimizing distances with added randomness
    distance_scores = current_distance_matrix * 0.7 - torch.randn_like(current_distance_matrix) * 0.4

    # Adjust the demand-based heuristic score matrix to prioritize meeting high-demand nodes with controlled randomness
    demand_scores = (current_load.unsqueeze(1) - delivery_node_demands.unsqueeze(0)) * 0.6 + torch.min(
        delivery_node_demands) / 4 + torch.randn_like(current_distance_matrix) * 0.3
   
    # Calculate the overall score matrix for edge selection
    overall_scores = distance_scores + demand_scores

    return overall_scores
```
