```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # new_cvrp_scores
    normalized_distance_scores = -(current_distance_matrix * 1.5) / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.5

    delivery_scores = ((delivery_node_demands**2).unsqueeze(0) - (current_load**2).unsqueeze(1)) * 0.6 + torch.max(delivery_node_demands) * 0.7 + torch.randn_like(current_distance_matrix) * 0.4

    noise_mask = (torch.rand_like(current_distance_matrix) > 0.3).float()
    diversity_factor = noise_mask * (torch.randn_like(current_distance_matrix) + 2.0)

    new_cvrp_scores = normalized_distance_scores + delivery_scores + diversity_factor

    # do not alter the computation
    [vrptw_scores, vrpb_scores, vrpl_scores, ovrp_scores] = heuristics_v1_helper()
    
    overall_scores=new_cvrp_scores+vrptw_scores+vrpb_scores+vrpl_scores+ovrp_scores

    return overall_scores
```
