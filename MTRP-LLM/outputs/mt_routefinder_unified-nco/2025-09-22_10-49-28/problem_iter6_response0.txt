```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Generate a new modified distance-based heuristic score matrix with different exponent
    distance_heuristic = -1 * (current_distance_matrix ** 1.2) * 0.1 + torch.randn_like(current_distance_matrix) * 0.1

    # Generate the modified demand-based heuristic score matrix with refined balancing using scaled demand values
    max_demand = torch.max(delivery_node_demands)
    scaled_demand_values = delivery_node_demands / max_demand
    delivery_score = (current_load.unsqueeze(1) - scaled_demand_values.unsqueeze(0)).float() * 0.4 + torch.randn_like(current_distance_matrix) * 0.2

    # Calculate the overall score matrix for edge selection with updated calculations
    overall_scores = distance_heuristic + delivery_score

    return overall_scores
```
