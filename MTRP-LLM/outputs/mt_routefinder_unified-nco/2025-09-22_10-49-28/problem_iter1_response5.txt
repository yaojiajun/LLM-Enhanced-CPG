```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Adjust the heuristic score calculations related to 'current_distance_matrix', 'delivery_node_demands', and 'current_load'
    normalized_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.8  # Modified random value from 0.7 to 0.8

    demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.7 + torch.max(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.6  # Modified coefficients from 0.8, 0.5 to 0.7, 0.6

    enhanced_noise = torch.randn_like(current_distance_matrix) * 1.5  # Modified noise level from 2.0 to 1.5

    cvrp_scores = normalized_distance_scores + demand_scores + enhanced_noise

    # Maintain the original calculations for the other parts of the function 

    ...

    return overall_scores
```

