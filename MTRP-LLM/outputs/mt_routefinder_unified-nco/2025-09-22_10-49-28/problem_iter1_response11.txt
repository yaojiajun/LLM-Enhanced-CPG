```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores
    # Compute the normalized distance-based heuristic score matrix with added diversity through randomness
    normalized_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.7

    # Create a modified demand-based heuristic score matrix emphasizing balanced demands distribution
    balanced_demand_scores = (2 * (delivery_node_demands.unsqueeze(0) + torch.min(current_load).unsqueeze(1)) -
                              3 * current_load.unsqueeze(1)) + torch.max(delivery_node_demands) / 2 + torch.randn_like(
        current_distance_matrix) * 0.5

    # Introduce increased randomness for exploration for balanced scoring approach
    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0

    # Combine the different heuristic scores with diversified strategies for balanced exploration
    cvrp_scores = normalized_distance_scores + balanced_demand_scores + enhanced_noise

    # Keep the remainder of the code unchanged from the original design

    # vrptw_scores
    ...

    # vrpb_scores
    ...

    # vrpl_scores
    ...

    # ovrp_scores
    ...

    overall_scores = cvrp_scores + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores

    return overall_scores
```
