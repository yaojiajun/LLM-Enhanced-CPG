```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
  
    # Modified calculations for 'current_distance_matrix', 'delivery_node_demands', and 'current_load'
    # Distance-based heuristic score matrix with absolute differences and noise
    absolute_distance_scores = -(torch.abs(current_distance_matrix) / torch.max(current_distance_matrix)) + torch.randn_like(current_distance_matrix) * 0.7

    # Demand-based heuristic score matrix focusing on demand gaps and randomness
    demand_scores = (torch.abs(delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.6) + (torch.max(delivery_node_demands) / 2) + torch.randn_like(current_distance_matrix) * 0.4

    # Combine the absolute distance and demand scores with noise for exploration
    combined_scores = absolute_distance_scores + demand_scores - 0.2 * torch.randn_like(current_distance_matrix)

    return combined_scores
```
