```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores - UPDATED
    # Modified distance-based heuristics: adding current_load dependencies and scaled noise
    distance_noise = torch.randn_like(current_distance_matrix) * 0.5
    normalized_distance_scores = (-current_distance_matrix / torch.max(current_distance_matrix) + 
                                  0.2 * current_load.unsqueeze(1) - 0.5) + distance_noise

    # demand_scores - NO CHANGE
  
    # Introduce increased randomness for exploration with higher noise level for improved diversity
    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0

    # Combine the different heuristic scores with diversified strategies for balanced exploration
    cvrp_scores = normalized_distance_scores + demand_scores + enhanced_noise

    # Remainder of the function calculations remain the same as heuristics_v1
    # Ensure outputs contain only finite values (no nan, inf, or -inf).
    
    return cvrp_scores

```
