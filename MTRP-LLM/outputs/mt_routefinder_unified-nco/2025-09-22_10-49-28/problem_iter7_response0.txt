```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Generate a mutated distance-based heuristic score matrix
    distance_heuristic = -1 * (current_distance_matrix ** 1.6) * 0.1 + torch.randn_like(current_distance_matrix) * 0.15

    # Generate the modified demand-based heuristic score matrix similar to the original version
    demand_score = (current_load.unsqueeze(1) - delivery_node_demands.unsqueeze(0).float()) * 0.3 + (1 / (1 + torch.exp(torch.mean(current_load) - torch.min(current_load)))) + torch.randn_like(current_distance_matrix) * 0.2

    # Calculate the overall score matrix for edge selection with adjusted weights and scaling
    overall_scores = distance_heuristic + demand_score

    return overall_scores
```  
