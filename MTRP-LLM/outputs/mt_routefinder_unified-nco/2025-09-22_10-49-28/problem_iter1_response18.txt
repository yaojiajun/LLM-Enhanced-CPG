```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Modify the distance-based heuristic score matrix with additional computational steps for variation and adjustment
    distance_heuristic = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(current_distance_matrix) * 0.7
    adjusted_distance_scores = torch.where(delivery_node_demands > current_load, distance_heuristic - 0.5, distance_heuristic + 0.5)
    
    # Adjust delivery and load scores based on delivery demand to current load ratio
    delivery_score = (delivery_node_demands.unsqueeze(0) / current_load.unsqueeze(1)) * 0.8 + 0.5
    load_score = (current_load.unsqueeze(0) / delivery_node_demands.unsqueeze(1)) * 0.6 - 0.3
    demand_based_scores = delivery_score + load_score
    
    # Combine the distance and demand scores with enriched randomness for exploration
    enriched_randomness = torch.randn_like(current_distance_matrix) * 1.2
    overall_scores = adjusted_distance_scores + demand_based_scores + enriched_randomness

    return overall_scores
```
