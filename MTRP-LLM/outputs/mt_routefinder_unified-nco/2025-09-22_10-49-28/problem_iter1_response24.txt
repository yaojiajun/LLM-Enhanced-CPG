```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores
    # Modified heuristics:

    # Compute the squared inverse of the distance-based heuristic score matrix with added diversity through randomness
    normalized_distance_scores = -(1 / (current_distance_matrix + 1e-6)) + torch.randn_like(current_distance_matrix) * 0.7

    # Compute the inverse demand-based heuristic score matrix with emphasis on low-demand nodes and enhanced randomness
    demand_scores = (1 / (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1) + 1e-6)) * 0.8 + torch.min(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    # Introduce increased randomness for exploration with higher noise level for improved diversity
    enhanced_noise = torch.randn_like(current_distance_matrix) * 1.5

    # Combine the different heuristic scores with diversified strategies for balanced exploration
    cvrp_scores = normalized_distance_scores + demand_scores + enhanced_noise

    # Include other main scores from the original implementation

    # vrptw_scores computation remains the same

    # vrpb_scores computation remains the same

    # vrpl_scores computation remains the same

    #ovrp_scores computation remains the same

    # Combine all scores to get the overall heuristic scores matrix
    overall_scores=cvrp_scores+vrptw_scores+vrpb_scores+vrpl_scores+ovrp_scores

    return overall_scores
```
