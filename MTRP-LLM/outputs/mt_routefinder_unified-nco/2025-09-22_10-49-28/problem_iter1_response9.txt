```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores_modified
    normalized_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.7

    demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.8 + torch.max(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0

    cvrp_scores_modified = normalized_distance_scores + demand_scores + enhanced_noise

    # Keeping other parts unchanged
    vrptw_scores, vrpb_scores, vrpl_scores, ovrp_scores = heuristics_v1(current_distance_matrix, delivery_node_demands, current_load, 
                                                                       delivery_node_demands_open, current_load_open, time_windows, 
                                                                       arrival_times, pickup_node_demands, current_length)

    overall_scores_modified = cvrp_scores_modified + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores

    return overall_scores_modified

```
