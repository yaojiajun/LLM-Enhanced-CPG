```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Generate a new distance-based heuristic score matrix with added noise and slight distance variations
    new_distance_scores = -1 * (current_distance_matrix ** 1.8) * 0.5 + torch.randn_like(current_distance_matrix) * 0.1

    # Use a revised demand calculation to prioritize demand gaps and randomness
    revised_demand_scores = (torch.abs(delivery_node_demands - current_load) * 0.7) + (torch.max(delivery_node_demands) / 4) + torch.randn_like(current_distance_matrix) * 0.2

    # Combine the new distance and demand scores with minimal noise
    combined_scores = new_distance_scores + revised_demand_scores

    return combined_scores
```
