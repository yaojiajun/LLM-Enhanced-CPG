```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores
    # Modify the calculation of normalized distance scores to prioritize multiple close destinations for efficient routing
    normalized_distance_scores = -current_distance_matrix / (torch.max(current_distance_matrix) + 1) + torch.randn_like(
        current_distance_matrix) * 0.7 + 3 * torch.exp(-(current_distance_matrix ** 2) / 50.0)

    # Modify demand score calculation to favor balancing vehicle loads across all destinations
    demand_scores = 0.5 * (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) + torch.abs(
        torch.std(delivery_node_demands).item() - torch.std(current_load).item()) * torch.randn_like(
        current_distance_matrix) * 0.5

    # Introduce enhanced noise levels to encourage exploration and prevent premature convergence
    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.5

    # Combine the different heuristic scores with modified strategies for diversified exploration
    cvrp_scores = normalized_distance_scores + demand_scores + enhanced_noise

    # Retain logic for other parts to ensure consistency in the overall function

    return cvrp_scores
```
