```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores
    # Update the normalized distance-based heuristic score matrix computation
    normalized_distance_scores = -current_distance_matrix / (torch.max(current_distance_matrix) * 2) + torch.randn_like(
      	current_distance_matrix) * 0.5

    # Update the demand-based heuristic score matrix computation with emphasis on utilizing remaining load capacity effectively
    demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 1.0 - torch.max(
        delivery_node_demands) / 3 + torch.randn_like(current_distance_matrix) * 0.3

    # Introduce increased randomness for exploration with controlled noise level for diversity
    enhanced_noise = torch.randn_like(current_distance_matrix) * 1.5

    # Combine the different heuristic scores with diversified strategies for balanced exploration
    cvrp_scores = normalized_distance_scores + demand_scores + enhanced_noise

    # vrptw_scores, vrpb_scores, vrpl_scores, ovrp_scores unchanged from the previous version

    overall_scores = cvrp_scores + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores

    return overall_scores
```
