```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores (Modified calculation)
    # Computing a distance-based heuristic score matrix with squared distances and randomized noise for exploration
    squared_distance_scores = -(current_distance_matrix ** 2) / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.7

    # Demand-based heuristic score matrix with penalty for unused capacity and added randomness
    demand_scores = (current_load - delivery_node_demands.unsqueeze(1)) * 0.8 - torch.max(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    # Introducing noise for exploration and diversity
    noise = torch.randn_like(current_distance_matrix) * 1.5

    # Combining distance and demand scores with noise
    cvrp_scores = squared_distance_scores + demand_scores + noise
    
    # Remaining calculations kept identical
    
    #vrptw_scores
    earliest_times = time_windows[:, 0].unsqueeze(0)
    latest_times = time_windows[:, 1].unsqueeze(0)

    waiting_times = torch.clamp(earliest_times - arrival_times, min=0)
    late_arrivals = torch.clamp(arrival_times - latest_times, min=0)

    criticality_weights = torch.where(late_arrivals > 0, 1.7, 0.3)

    time_compensation = criticality_weights * (waiting_times + late_arrivals)

    vrptw_scores = time_compensation

    #vrpb_scores, vrpl_scores, and ovrp_scores calculations remain the same as in heuristics_v1
    
    overall_scores=cvrp_scores+vrptw_scores+vrpb_scores+vrpl_scores+ovrp_scores

    return overall_scores
```
