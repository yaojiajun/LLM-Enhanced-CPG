```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores (Updated)
    # Generate a random coefficient matrix for diversity
    diversity_matrix = torch.randn_like(current_distance_matrix) * 0.7

    # Modify the distance-based heuristic score matrix with the introduction of a curvature factor
    distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + diversity_matrix

    # Reshape the delivery demand and current load vectors for anomaly detection
    reshaped_current_load = current_load.unsqueeze(1).repeat(1, current_distance_matrix.shape[1])

    # Compute the delivery demand anomaly score as deviations from current load and demand
    delivery_anomaly_score = torch.abs(delivery_node_demands.unsqueeze(0) - reshaped_current_load)

    # Enhance randomness in the demand-based heuristic score with anomaly compensation
    demand_scores = (1 / (delivery_anomaly_score + 1e-6)) * 0.8 + diversity_matrix * 0.5

    # Introduce controlled randomness for further exploration
    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0

    cvrp_scores = distance_scores + demand_scores + enhanced_noise

    # Remainder of the function logic remains the same as heuristics_v1

    return cvrp_scores
```
