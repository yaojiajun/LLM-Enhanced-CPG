```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    promo_size, num_nodes = current_distance_matrix.shape
    
    # Determine feasible visits
    load_feasible_delivery = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0))
    load_feasible_pickup = (current_load_open.unsqueeze(1) >= pickup_node_demands.unsqueeze(0))
    time_feasible = (arrival_times <= time_windows[:, 1].unsqueeze(0)) & (arrival_times >= time_windows[:, 0].unsqueeze(0))
    duration_feasible = (current_length.unsqueeze(1) >= current_distance_matrix)
    
    feasible_mask = load_feasible_delivery & load_feasible_pickup & time_feasible & duration_feasible
    
    # Compute heuristic scores
    base_scores = -current_distance_matrix if feasible_mask else float('-inf')
    
    # Incorporate randomness to avoid local optima convergence
    random_scores = torch.rand_like(base_scores) * feasible_mask.float()
    heuristic_scores = base_scores + random_scores
    
    # Normalize the heuristic scores for feasible edges to a standard range
    heuristic_scores[feasible_mask] -= heuristic_scores[feasible_mask].min(dim=1, keepdim=True).values
    heuristic_scores[feasible_mask] /= (heuristic_scores[feasible_mask].max(dim=1, keepdim=True).values + 1e-6)
    
    return heuristic_scores
```
