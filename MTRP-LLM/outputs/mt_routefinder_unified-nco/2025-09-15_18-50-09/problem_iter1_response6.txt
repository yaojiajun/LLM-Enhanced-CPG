```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Initialize heuristic score matrix with zeros
    score_matrix = torch.zeros_like(current_distance_matrix)

    # Calculate the eligibility of visiting each node based on constraints
    # Capacity constraints for delivery and pickup
    delivery_capacity_eligible = (current_load.unsqueeze(-1) >= delivery_node_demands.unsqueeze(0)).to(torch.float32)
    pickup_capacity_eligible = (current_load_open.unsqueeze(-1) >= pickup_node_demands.unsqueeze(0)).to(torch.float32)

    # Time window constraints
    time_window_opening = (arrival_times.unsqueeze(-1) >= time_windows[:, 0].unsqueeze(0)).to(torch.float32)
    time_window_closing = (arrival_times.unsqueeze(-1) + current_distance_matrix <= time_windows[:, 1].unsqueeze(0)).to(torch.float32)
    time_window_eligible = time_window_opening * time_window_closing

    # Route duration constraints
    duration_eligible = (current_length.unsqueeze(-1) >= current_distance_matrix).to(torch.float32)

    # Cumulative eligibility based on constraints
    eligibility = delivery_capacity_eligible * pickup_capacity_eligible * time_window_eligible * duration_eligible

    # Calculate a normalized score from the distance matrix using eligibility 
    normalized_distances = current_distance_matrix / (1 + eligibility)

    # Adding randomness to scores to prevent local optima
    random_factor = torch.rand_like(normalized_distances) * eligibility 
    adjusted_scores = (1/normalized_distances + random_factor) * eligibility
    
    # Apply negative impacts based on non-eligible solutions (i.e., where vehicles cannot satisfy constraints)
    score_matrix = adjusted_scores * (eligibility > 0)

    return score_matrix
```
