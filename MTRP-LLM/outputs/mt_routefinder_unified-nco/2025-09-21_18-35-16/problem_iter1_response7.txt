```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores_modified
    max_current_distance = torch.max(current_distance_matrix)
    normalized_distance_scores = -current_distance_matrix / max_current_distance + torch.randn_like(
        current_distance_matrix) * 0.7

    adjusted_delivery_node_demands = (delivery_node_demands / torch.sum(delivery_node_demands)) + torch.abs(
        current_load.min()) / torch.max(delivery_node_demands)  # Ensure positive values and normalize
    delivery_scores = adjusted_delivery_node_demands.unsqueeze(0) * 0.8 + torch.randn_like(
        current_distance_matrix) * 0.5

    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0

    cvrp_scores_modified = normalized_distance_scores + delivery_scores + enhanced_noise

    # vrptw_scores, vrpb_scores, vrpl_scores, and ovrp_scores copied from the original function for consistency
    # .........


    overall_scores = cvrp_scores_modified + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores

    return overall_scores
```
