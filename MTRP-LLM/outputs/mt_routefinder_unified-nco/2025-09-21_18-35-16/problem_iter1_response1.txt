```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # cvrp_scores
    normalized_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.7
    
    # Modify the demand-based heuristic score calculation for diversity
    delivery_score = (current_load / delivery_node_demands.unsqueeze(0)).clamp(min=1e-6, max=2) * 1.1 + torch.randn_like(current_distance_matrix) * 0.6
    
    # Introduce adaptive noise scaling to increase exploration
    noise_scale = (1 + 0.3 * torch.randn((1, current_distance_matrix.shape[1])))
    
    # Combine modified distance heuristic, diverse delivery scores, and noise scaling
    cvrp_scores = normalized_distance_scores + delivery_score + torch.randn_like(current_distance_matrix) / noise_scale
    
    # Logic for other heuristic scores remains unchanged

    return cvrp_scores
```
