```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Modify the distance-based heuristic score matrix by focusing on balanced exploration
    normalized_distance_scores = -(current_distance_matrix / torch.max(current_distance_matrix)) + torch.randn_like(
        current_distance_matrix) * 0.7

    # Adapt delivery-based heuristic score to emphasize unloading before high-demand hints without affecting randomness
    delivery_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 1.2 + torch.max(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    # Combination with previous heuristics adding slightly decreased noise for variance
    final_delivery_scores = delivery_scores + torch.randn_like(current_distance_matrix) * 0.3

    # Combine all modified scores for the final heuristic for additional exploration and balance
    final_scores = normalized_distance_scores + final_delivery_scores

    return final_scores
```
