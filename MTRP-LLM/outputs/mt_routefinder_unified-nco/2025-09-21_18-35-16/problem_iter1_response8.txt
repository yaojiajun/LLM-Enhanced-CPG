```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # New modified calculation based on current_distance_matrix
    distance_heuristic = -current_distance_matrix / torch.max(current_distance_matrix)**2 + torch.randn_like(current_distance_matrix) * 0.5

    # New modified calculation based on delivery_node_demands
    delivery_score = delivery_node_demands.unsqueeze(0) / current_load.unsqueeze(1).clamp(min=1e-8) + torch.randn_like(current_distance_matrix) * 0.2

    # Calculate initial random factors for diversity
    random_factors = torch.randn_like(current_distance_matrix)

    # Combine different heuristic scores with controlled randomness for exploration
    total_scores = distance_heuristic + delivery_score + random_factors

    return total_scores
```
