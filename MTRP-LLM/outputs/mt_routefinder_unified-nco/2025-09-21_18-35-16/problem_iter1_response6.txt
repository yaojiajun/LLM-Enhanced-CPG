```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # cvrp_scores   
    normalized_distance_scores = torch.exp(-current_distance_matrix) # Change calculation using exponential distance factors

    # Compute the demand-based heuristic score matrix with a focus on higher demand satisfaction
    demand_scores = (torch.sqrt(delivery_node_demands) / (current_load + 1e-4))  # Change in demand satisfaction computation

    enhanced_noise = torch.randn_like(current_distance_matrix) * 0.9  # Increased randomness for exploration with noise level adjustment
   
    # Combined heuristic scores with varied diversity for balanced exploration
    cvrp_scores = normalized_distance_scores + demand_scores + enhanced_noise

    # Original code for other heuristic computations remain unchanged

    vrptw_scores = time_compensation
    
    vrpb_scores = vrpb_compensation
    
    vrpl_scores = vrpl_compensation
    
    ovrp_scores = ovrp_compensation
        
    overall_scores = cvrp_scores + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores

    return overall_scores
```
