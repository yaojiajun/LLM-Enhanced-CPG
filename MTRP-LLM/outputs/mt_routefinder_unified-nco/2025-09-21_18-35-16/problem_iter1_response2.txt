```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Modified heuristics_v1 implementation

    # Updated distance heuristic score using a different formulation
    max_distance = torch.max(current_distance_matrix)
    normalized_distance_scores = (max_distance - current_distance_matrix) / max_distance + torch.randn_like(current_distance_matrix) * 0.7

    # Modified delivery scores with alternate approach
    delivery_scores = (2 * delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.6 + torch.mean(delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.8
    
    # Retain the original demand-based scores for now while incorporating varied scaling
    demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.8 + torch.mean(delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5
    
    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0
    
    modified_cvrp_scores = normalized_distance_scores + delivery_scores + enhanced_noise

    # Carry on with the calculations for the remaining parts for vrptw_scores, vrpb_scores, vrpl_scores, and ovrp_scores
    
    overall_scores = modified_cvrp_scores + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores

    return overall_scores
```
