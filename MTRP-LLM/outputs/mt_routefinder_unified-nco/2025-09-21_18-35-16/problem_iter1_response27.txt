```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Customized computation for distance-based heuristic scores
    improved_distance_scores = -(current_distance_matrix / torch.sum(current_distance_matrix)) + torch.randn_like(
        current_distance_matrix) * 0.6
    
    # Demand-based heuristic score matrix adjusted to emphasize high-demand nodes 
    enhanced_demand_scores = (2*delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.7 + torch.max(
        delivery_node_demands) / 3 + torch.randn_like(current_distance_matrix) * 0.4

    # Combine the modified heuristic scores with increased weight on demand satisfaction
    cvrp_scores_v2 = improved_distance_scores + enhanced_demand_scores

    # Remaining implementation unchanged from the original function
    
    return cvrp_scores_v2
```
