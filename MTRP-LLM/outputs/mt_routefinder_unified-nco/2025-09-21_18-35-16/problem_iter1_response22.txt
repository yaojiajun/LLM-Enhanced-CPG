```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores
    # Compute the exponential of negative normalized distance matrix as the distance heuristic
   distance_heuristic = torch.exp(-current_distance_matrix / torch.max(current_distance_matrix))

    # Compute the demand score based on squared differences between delivery demands and current load   
    delivery_score = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1))**2

    # Combine the distance heuristic and delivery score for cvrp_scores
    cvrp_scores = distance_heuristic + 0.5 * delivery_score

    # Keep the calculation of the rest of the heuristic indicators unchanged
    # ...
    
    overall_scores = cvrp_scores + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores
    return overall_scores
```
