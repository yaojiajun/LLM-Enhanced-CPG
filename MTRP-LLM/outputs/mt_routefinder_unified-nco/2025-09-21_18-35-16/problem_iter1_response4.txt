```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores_v2
    # New computation for normalized distance-based heuristic score matrix with diversified noise
    normalized_distance_scores = -current_distance_matrix / torch.mean(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.6

    # Scale delivery demands and remaining loads for enhanced demand-based heuristic scoring
    scaled_d_demand = delivery_node_demands.unsqueeze(0) * 0.9
    scaled_remaining_load = current_load.sqrt()

    # Enhanced system balancing with load-dependent scores and extended randomness
    demand_scores_v2 = (scaled_d_demand - scaled_remaining_load.unsqueeze(1)) * 0.7 + torch.max(
        scaled_d_demand) / 2 + torch.randn_like(current_distance_matrix) * 0.7

    # Increased exploration through higher noise diversification
    enhanced_noise_v2 = torch.randn_like(current_distance_matrix) * 1.3

    # Aggregate diverse heuristics for a globally improved candidate selection
    cvrp_scores_v2 = normalized_distance_scores + demand_scores_v2 + enhanced_noise_v2

    # The other parts of the function remain unchanged

    return cvrp_scores_v2

```  
