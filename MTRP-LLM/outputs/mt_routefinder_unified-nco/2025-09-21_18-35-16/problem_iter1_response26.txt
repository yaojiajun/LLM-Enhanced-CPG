```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores
    # Compute a modified version of the distance-based heuristic score matrix
    squared_distance = current_distance_matrix ** 2
    sqrt_normalized_distance_scores = -torch.sqrt(squared_distance / torch.max(squared_distance)) + torch.randn_like(
        current_distance_matrix) * 0.5

    # Compute a modified demand-based heuristic score matrix with added randomness
    demand_scores = (delivery_node_demands * 2 - current_load) * 0.6 + torch.max(
        delivery_node_demands) / 3 + torch.randn_like(current_distance_matrix) * 0.3

    # Introduce increased randomness for exploration with different noise levels
    enhanced_noise = torch.randn_like(current_distance_matrix) * 1.5

    # Combine the different heuristic scores with modified strategies for balanced exploration
    cvrp_scores = sqrt_normalized_distance_scores + demand_scores + enhanced_noise
    
    vrptw_scores, vrpb_scores, vrpl_scores, ovrp_scores = torch.zeros_like(current_distance_matrix), torch.zeros_like(
        current_distance_matrix), torch.zeros_like(current_distance_matrix), torch.zeros_like(current_distance_matrix)

    overall_scores = cvrp_scores + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores

    return overall_scores
```
