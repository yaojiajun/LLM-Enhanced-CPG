```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:    
    # cvrp_scores
    # Modifying the distance-based heuristic scoring
    distance_heuristic = torch.exp(-current_distance_matrix)

    # Aligning the delivery and load scores to exacerbate differences for high-demand nodes
    delivery_score = delivery_node_demands.sum() - current_load.sum()
    pickup_score = torch.exp((pickup_node_demands - current_load).clamp(min=0.0))

    cvrp_scores = distance_heuristic * 0.6 + delivery_score * 0.8 + pickup_score * 0.4
    
    # Remaining calculations remain as in heuristics_v1
    ...

    # Combine all individual scores into the overall scores matrix
    overall_scores = cvrp_scores + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores
    
    return overall_scores
```
