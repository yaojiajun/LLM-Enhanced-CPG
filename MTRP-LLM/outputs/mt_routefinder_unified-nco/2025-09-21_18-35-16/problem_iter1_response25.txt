```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp scores
    # Change weight distribution and introduce another source of randomness
    distance_heuristic = -current_distance_matrix * 2 / torch.max(current_distance_matrix) + torch.randn_like(current_distance_matrix) * 0.5
    
    # Revise delivery score computation
    unique_demands = torch.unique(delivery_node_demands)
    mean_demand = torch.mean(delivery_node_demands)
    delivery_score = (mean_demand - current_load) - unique_demands[0] + torch.randn_like(current_distance_matrix) * 0.6
    
    # Merge delivery and distance heuristics with different random components
    cvrp_scores = distance_heuristic + delivery_score

    # Remain unchanged calculations for vrptw scores
    
    # Remain unchanged calculations for vrpb scores
    
    # Remain unchanged calculations for vrpl scores
    
    # Remain unchanged calculations for ovrp scores

    overall_scores = cvrp_scores+vrptw_scores+vrpb_scores+vrpl_scores+ovrp_scores

    return overall_scores
```
