```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Compute the modified normalized distance-based heuristic score matrix with added randomness
    normalized_distance_scores = -(current_distance_matrix ** 2) / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.5

    # Compute the modified demand-based heuristic score matrix based on squared demand differences and randomness
    demand_scores = (delivery_node_demands ** 2 - current_load ** 2) * 0.8 + torch.max(
        delivery_node_demands) + torch.randn_like(current_distance_matrix) * 0.6

    cvrp_scores = normalized_distance_scores + demand_scores + torch.randn_like(current_distance_matrix) * 1.0

    # Keep the calculations for other criteria unchanged
    
    return cvrp_scores
```
