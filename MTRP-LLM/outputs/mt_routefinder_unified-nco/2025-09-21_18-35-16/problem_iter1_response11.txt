```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # heuristics function with modified calculations for 'current_distance_matrix', 'delivery_node_demands', and 'current_load'
    normalized_distance_scores = -current_distance_matrix / 2 / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.6  # Modified distance-based heuristic with adjusted scaling factor

    # Let's introduce a non-linear relationship between demand and load in the 'demand_scores' calculation
    demand_scores = (delivery_node_demands.unsqueeze(0)**2 / (current_load.unsqueeze(1)**2 + 1e-8)) * 0.7 + torch.max(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    enhanced_noise = torch.randn_like(current_distance_matrix) * 1.5  # Adjusted randomness level

    cvrp_scores = normalized_distance_scores + demand_scores + enhanced_noise

    # Rest of the computations remain the same
    # ... (rest of the function code)

    overall_scores = cvrp_scores  # Modify only this line based on the updated calculations

    return overall_scores
```
