```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores_modified
    # Compute a modified version of the distance-based heuristic score matrix with added noise
    normalized_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.7

    distance_heuristic = normalized_distance_scores

    delivery_score = (delivery_node_demands - current_load) * 0.8

    # Introduce noise for exploration with balanced level of randomness
    noise_level = torch.randn_like(current_distance_matrix) * 0.5

    cvrp_scores_modified = distance_heuristic + delivery_score + noise_level

    # Keep the logic for vrptw_scores, vrpb_scores, vrpl_scores, and ovrp_scores the same as in heuristics_v1

    # Calculate the overall heuristic score matrix
    overall_scores_modified = cvrp_scores_modified + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores

    return overall_scores_modified
```
