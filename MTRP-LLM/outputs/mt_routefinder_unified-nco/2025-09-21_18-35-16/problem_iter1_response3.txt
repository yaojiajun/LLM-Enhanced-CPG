```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Modified calculations for 'current_distance_matrix', 'delivery_node_demands', 'current_load'

    # --- Modify distance heuristic score calculation ---
    # Compute the distance heuristic score without normalization but still including randomness
    distance_heuristic = -current_distance_matrix + torch.randn_like(current_distance_matrix) * 0.7
    
    # --- Modify delivery score calculation ---
    # Calculate the potential delivery score based on delivery demands and remaining capacity
    remaining_capacity = current_load.unsqueeze(1) - delivery_node_demands.unsqueeze(0)
    delivery_score = delivery_node_demands + 2 * remaining_capacity + torch.randn_like(current_distance_matrix) * 0.5

    # --- Modify pickup score calculation ---
    # Calculate the pickup score based on pickup demands and current load
    pickup_score = pickup_node_demands * current_load + torch.randn_like(current_distance_matrix) * 0.5

    # Combine the modified heuristic scores with diversified strategies for balanced exploration
    overall_scores = distance_heuristic + delivery_score + pickup_score

    return overall_scores
```
