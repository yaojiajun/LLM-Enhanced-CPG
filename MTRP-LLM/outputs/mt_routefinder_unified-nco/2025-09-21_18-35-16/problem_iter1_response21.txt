```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Update the heuristic calculation for current_distance_matrix, delivery_node_demands, and current_load
    
    # Modify the distance-based heuristic score incorporating randomness and diversity
     random_noise = (1 + 0.3 * torch.rand((current_distance_matrix.size(0), current_distance_matrix.size(1))))  # Add controlled randomness
    distance_heuristic = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(current_distance_matrix) * 0.7 * random_noise
    
    # Adjust how delivery and load balance impact the score considering the remaining load and delivery demands
    delivery_score = torch.min((delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.8, torch.zeros_like(current_distance_matrix) + 1)
    pickup_score = current_load / (pickup_node_demands.unsqueeze(0).clamp(min=1e-6)) + 0.1
    
    final_scores = distance_heuristic + delivery_score + pickup_score
    
    return final_scores

```
