```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores_v2
    # Customized normalization and diversification with modification of distance-based heuristic calculation
    normalized_distance_scores_v2 = -(current_distance_matrix - torch.min(current_distance_matrix)) / (torch.max(current_distance_matrix) - torch.min(current_distance_matrix)) + torch.randn_like(
        current_distance_matrix) * 0.5 + 0.5

    # Compute the demand-based heuristic score matrix with emphasis on high-demand nodes and enhanced randomness
    demand_scores_v2 = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 1.2 + torch.max(
        delivery_node_demands) / 3 + torch.randn_like(current_distance_matrix) * 0.4 - 0.2

    # Introduce increased randomness for exploration with higher noise level for improved diversity
    enhanced_noise_v2 = torch.randn_like(current_distance_matrix) * 1.5

    # Combine the different heuristic scores with diversified strategies for balanced exploration
    cvrp_scores_v2 = normalized_distance_scores_v2 + demand_scores_v2 + enhanced_noise_v2

    # Updating additional matrix scores similarly to v1 without changes

    
    overall_scores_v2 = cvrp_scores_v2 + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores

    return overall_scores_v2
```
