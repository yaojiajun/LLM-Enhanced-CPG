```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores
    # Compute the normalized distance-based heuristic function for edge selection
    normalized_distance_scores = -current_distance_matrix / (torch.max(current_distance_matrix) + 1e-8) + torch.randn_like(
        current_distance_matrix) * 0.7
    
    # Compute the demand-based heuristic score matrix with randomness
    delivery_score = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.8
    delivery_score += torch.max(delivery_score) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    # Introduce additional stochasticity with noise
    delivery_score += torch.randn_like(current_distance_matrix) * 0.5

    # Combine the different heuristic scores for cvrp_scores
    cvrp_scores = normalized_distance_scores + delivery_score
    
    # Remainder of the function remains unchanged from the original

    return cvrp_scores
```
