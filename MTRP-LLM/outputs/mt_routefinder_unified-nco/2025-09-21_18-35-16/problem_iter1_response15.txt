```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Modification: Customized distance-based heuristic score matrix with integration into the total score
    distance_heuristic = torch.exp(-(current_distance_matrix * 0.05)) # Custom distance heuristic score calculation

    # Compute the demand-based heuristic score matrix with emphasis on high-demand nodes and enhanced randomness
    demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.8 + torch.max(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    # Introduce increased randomness for exploration with higher noise level
    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0

    # Combine the distance heuristic with demand scores and enhanced noise
    weighted_distance = 0.6
    weighted_demand = 0.3
    weighted_noise = 0.1
    overall_scores = (weighted_distance * distance_heuristic) + (weighted_demand * demand_scores) + (weighted_noise * enhanced_noise)

    return overall_scores
```
