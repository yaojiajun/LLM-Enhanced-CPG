```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    # Calculate heuristic scores based on delivered demand satisfaction ratios, waiting times, and remaining capacities.

    # Distance metric normalization to assist heuristic evaluation
    normalized_distance = current_distance_matrix / current_distance_matrix.max()

    # Eligibility based on capacity
    capacity_eligibility = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    capacity_eligibility_open = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0)).float()
    
    # Time window feasibility calculations
    earliest_arrival = arrival_times + normalized_distance
    time_window_eligibility = (earliest_arrival >= time_windows[:, 0].unsqueeze(0)) & (earliest_arrival <= time_windows[:, 1].unsqueeze(0))
  
    # Duration constraints
    duration_eligibility = (normalized_distance <= current_length.unsqueeze(1))

    # Combine eligibility filters
    combined_eligibility = capacity_eligibility * capacity_eligibility_open * time_window_eligibility.float() * duration_eligibility
    
    # Calculate heuristic scores
    scores = torch.where(combined_eligibility.bool(), 
                        -normalized_distance * (1 - torch.uniform(torch.zeros_like(current_distance_matrix))) + 1,
                        torch.tensor(-float('inf')).to(current_distance_matrix.device))  # undesirable edges are penalized 
                        
    # Introduce stochasticity to avoid local optima 
    random_noise = torch.rand_like(scores) * 0.1
    scores += random_noise

    return scores
```
