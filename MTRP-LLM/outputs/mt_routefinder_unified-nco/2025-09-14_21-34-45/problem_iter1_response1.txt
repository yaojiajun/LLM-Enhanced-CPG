```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Initial scores with maximum values indicate promising routes
    scores = torch.ones_like(current_distance_matrix)

    # Assessing delivery feasibility for both routes and open routes
    feasible_deliveries = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    feasible_deliveries_open = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0)).float()

    # Calculating feasible conditions based on time windows
    current_time = arrival_times + current_distance_matrix
    time_window_constraints = (current_time.unsqueeze(1) >= time_windows[:, 0]) & (current_time.unsqueeze(1) <= time_windows[:, 1])

    # Apply feasible conditions to the scores
    scores *= feasible_deliveries * time_window_constraints.float()
    scores *= feasible_deliveries_open * time_window_constraints.float()

    # Incorporate distance penalties; further reduce the scores based on current distance matrix
    distance_penalty_factor = 1 / (1 + current_distance_matrix)
    scores -= distance_penalty_factor * 10  # Scaling to ensure distances lower the score, encouraging shorter paths

    # Enhance randomness to avoid local optima convergence
    randomness_factor = (2 * torch.rand_like(scores) - 1) * 0.5  # Small random values in range (-0.5, 0.5)
    scores += randomness_factor
    
    # Filter out non-feasible options by applying a mask, setting them to a very negative score
    scores *= feasible_deliveries + feasible_deliveries_open

    return scores
```
