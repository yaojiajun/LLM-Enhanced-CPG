```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:

    # Initialize the heuristic score matrix with zeros
    heuristic_scores = torch.zeros_like(current_distance_matrix)

    # Calculate distance adjusted scores inversely related to the distance
    inverse_distance_scores = 1.0 / (current_distance_matrix + 1e-6)  # Add small value to avoid division by zero
    heuristic_scores += inverse_distance_scores

    # Assessing delivery feasibility based on current load
    load_feasibility = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    heuristic_scores *= load_feasibility
    
    # Assessing open load feasibility
    load_open_feasibility = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0)).float()
    heuristic_scores *= load_open_feasibility
    
    # Time window constraints
    service_start_times = arrival_times.unsqueeze(1)
    time_window_constraints = ((service_start_times >= time_windows[:, 0].unsqueeze(0)) & 
                                (service_start_times <= time_windows[:, 1].unsqueeze(0))).float()
    heuristic_scores *= time_window_constraints
    
    # Penalty for exceeding route duration
    duration_limit_penalty = (current_length.unsqueeze(1) >= current_distance_matrix).float()
    heuristic_scores *= duration_limit_penalty

    # Scaling to introduce enhanced randomness
    random_noise = (torch.rand_like(heuristic_scores) - 0.5) * 0.1  # adjust randomness factor as needed
    heuristic_scores += random_noise

    # Negative scoring for nodes that don't have feasibility
    feasible_routes_mask = load_feasibility * load_open_feasibility * time_window_constraints * duration_limit_penalty
    heuristic_scores *= feasible_routes_mask

    return heuristic_scores
```
