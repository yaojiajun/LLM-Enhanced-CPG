```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    # Extract constants
    N = delivery_node_demands.shape[0] - 1  # Nodes excluding depot
    pomo_size = current_distance_matrix.shape[0]  # Number of trajectories
    
    # Featherweight penalty when demand exceeds capacity
    oversupply_penalty_delivery = (delivery_node_demands.unsqueeze(0) > current_load.unsqueeze(1)).float() * -1e6
    oversupply_penalty_delivery_open = (delivery_node_demands_open.unsqueeze(0) > current_load_open.unsqueeze(1)).float() * -1e6
    
    # Meeting the existing time windows, negative penalty when we cannot meet the required time window
    window_violation_penalty = (arrival_times.unsqueeze(1) < time_windows[:, 0].unsqueeze(0)).float() * -1e6
    window_violation_penalty += (arrival_times.unsqueeze(1) > time_windows[:, 1].unsqueeze(0)).float() * -1e6
    
    # Consider current length constraints
    duration_exceed_penalty = (current_distance_matrix > current_length.unsqueeze(1)).float() * -1e6
    
    # Calculate base scores from current distance matrix
    base_scores = -current_distance_matrix
    
    # Calculate final heuristic scores
    heuristic_scores = base_scores + oversupply_penalty_delivery + oversupply_penalty_delivery_open + \
                       window_violation_penalty + duration_exceed_penalty
    
    # Add randomness to avoid convergence issues by propagating noise
    random_factor = torch.randn_like(heuristic_scores) * 0.1
    heuristic_scores += random_factor
    
    return heuristic_scores
```
