```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:

    # Initialize heuristic score matrix
    heuristic_scores = torch.zeros_like(current_distance_matrix)

    # Calculate clear opening for feasible demands
    feasible_deliveries = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).to(torch.float32)
    feasible_deliveries_open = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0)).to(torch.float32)
   
    # Evaluate time window adherence
    current_time = arrival_times.clone()
    clamped_time = torch.clamp(current_time, time_windows[:, 0], time_windows[:, 1])
    time_window_score = (clamped_time == current_time).to(torch.float32)

    # Check route length budgets
    length_constraints = (current_length.unsqueeze(1) >= current_distance_matrix).to(torch.float32)
    
    # Enhanced randomness introduced through added Gaussian noise
    noise_factor = torch.randn_like(current_distance_matrix) * 0.1
    randomized_distance_matrix = current_distance_matrix + noise_factor

    # Compensate for the delivery demand satisfaction in the heuristic score
    demand_score = (feasible_deliveries + feasible_deliveries_open + 
                    length_constraints + time_window_score + 1).clamp(0, 2)

    # Calculate the score only for permissible edges
    processed_scores = demand_score * (1 / (randomized_distance_matrix + 1e-5))
    
    # Integrate random edge valuation to prevent local optima
    total_scores = processed_scores - (0.5 * randomized_distance_matrix)
    
    # Assign positive scores where good delivery paths are located
    heuristic_scores += total_scores

    return heuristic_scores
```
