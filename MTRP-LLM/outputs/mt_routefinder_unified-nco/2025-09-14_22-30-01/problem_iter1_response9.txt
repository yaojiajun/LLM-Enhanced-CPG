```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor,
                  delivery_node_demands: torch.Tensor,
                  current_load: torch.Tensor,
                  delivery_node_demands_open: torch.Tensor,
                  current_load_open: torch.Tensor,
                  time_windows: torch.Tensor,
                  arrival_times: torch.Tensor,
                  pickup_node_demands: torch.Tensor,
                  current_length: torch.Tensor) -> torch.Tensor:

    # Initialize H matrix (heuristic scores) to zero
    H = torch.zeros_like(current_distance_matrix)

    # Checking capacity satisfaction for deliveries
    capacity_check_delivery = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    
    # Checking capacity satisfaction for pickups
    capacity_check_pickup = (current_load_open.unsqueeze(1) >= pickup_node_demands.unsqueeze(0)).float()

    # Time window feasibility
    feasible_arrival_times = (arrival_times.unsqueeze(1) + current_distance_matrix <= time_windows[:, 1].unsqueeze(0)).float()
    time_window_check = (arrival_times.unsqueeze(1) >= time_windows[:, 0].unsqueeze(0)).float()

    # Duration checks based on remaining route length
    duration_check = (current_length.unsqueeze(1) >= current_distance_matrix).float()

    # Combining all conditions to form a binary feasible route matrix
    feasible_routes = capacity_check_delivery * capacity_check_pickup * feasible_arrival_times * time_window_check * duration_check

    # Base heuristic scores from distances, apply factors for unjustifiable routes
    H += feasible_routes * (1 / (current_distance_matrix + 1e-6))  # Avoid division by zero

    # Introduce randomness by adding a noise factor to promote diversity in selected routes
    random_adjustment = torch.rand_like(H) * 0.1  # Randomness factor
    H += random_adjustment * feasible_routes  # Applying randomness only to feasible edges

    # Normalize scores making promising edges positive; apply a shift for enhanced exploration
    H -= H.max(dim=1, keepdim=True).values
    H[H < 0] = -0.1

    return H
```
