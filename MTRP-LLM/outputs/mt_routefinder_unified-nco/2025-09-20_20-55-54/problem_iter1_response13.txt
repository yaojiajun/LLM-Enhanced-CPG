```python
import torch
import torch.nn.functional as F

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Compute ratios and normalize with epsilon
    load_ratio = current_load / (delivery_node_demands + 1e-8)
    load_open_ratio = current_load_open / (delivery_node_demands_open + 1e-8)

    # Ensure finite values
    load_ratio = torch.clamp(load_ratio, -1e3, 1e3)
    load_open_ratio = torch.clamp(load_open_ratio, -1e3, 1e3)
    
    # Introduce controlled randomness
    noise = torch.randn_like(load_ratio) * 0.1
    
    # Compute heuristic scores using complex function
    heuristic_scores = ((current_distance_matrix - 0.5 * load_ratio + 0.2 * load_open_ratio).sum(dim=1, keepdim=True) + noise)

    return F.relu(heuristic_scores)
```
