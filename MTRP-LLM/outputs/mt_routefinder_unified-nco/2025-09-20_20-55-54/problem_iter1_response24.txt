```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Normalize input tensors to prevent division by zero
    delivery_node_demands_norm = delivery_node_demands.clone() + 1e-8
    current_load_open_norm = current_load_open.clone() + 1e-8
    
    # Calculate a randomized heuristic score matrix
    heuristic_scores = torch.randn(current_distance_matrix.size())
    
    # Apply constraints and normalization for stability
    heuristic_scores = torch.clamp(heuristic_scores, min=-1e8, max=1e8)
    heuristic_scores = (heuristic_scores * delivery_node_demands_norm) / current_load_open_norm

    return heuristic_scores

heuristic_matrix_v2 = heuristics_v2(current_distance_matrix, delivery_node_demands, current_load, delivery_node_demands_open, current_load_open, time_windows, arrival_times, pickup_node_demands, current_length)
```
