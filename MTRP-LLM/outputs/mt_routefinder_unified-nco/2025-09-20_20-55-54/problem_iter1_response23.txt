```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Calculate heuristic score by combining different factors and introducing controlled randomness
    heuristic_score = current_distance_matrix * (1 + torch.rand(current_distance_matrix.shape))  # Adding controlled randomness

    # Apply constraints by masking infeasible values based on capacity and time window limits
    mask_capacity = current_load.unsqueeze(1) >= delivery_node_demands
    mask_capacity_open = current_load_open.unsqueeze(1) >= delivery_node_demands_open
    mask_time_window = (arrival_times + current_distance_matrix) <= time_windows[:, 1].unsqueeze(0)

    heuristic_score = torch.where(mask_capacity & mask_capacity_open & mask_time_window, heuristic_score, torch.tensor(-1e9))  # Mask infeasible values

    # Ensure outputs contain only finite values
    heuristic_score = torch.clamp(heuristic_score, min=-1e9, max=1e9)

    return heuristic_score

```
