```python
import torch

def heuristics_v2(current_distance_matrix, delivery_node_demands, current_load, delivery_node_demands_open, current_load_open, time_windows, arrival_times, pickup_node_demands, current_length):
    epsilon = 1e-8

    # Compute heuristic scores based on problem-specific constraints, diversity, and stable scaling
    scores = torch.empty_like(current_distance_matrix).uniform_(-1, 1)  # Initialize with random scores

    # Ensure numerical stability
    delivery_node_demands = delivery_node_demands + epsilon
    current_load = current_load + epsilon
    delivery_node_demands_open = delivery_node_demands_open + epsilon
    current_load_open = current_load_open + epsilon
    time_windows = time_windows + epsilon

    # Ensure score diversity and controlled randomness
    random_noise = torch.empty_like(scores).uniform_(-0.1, 0.1)
    scores = scores + random_noise

    return scores

# Example usage:
# heuristics_v2(current_distance_matrix, delivery_node_demands, current_load, delivery_node_demands_open, current_load_open, time_windows, arrival_times, pickup_node_demands, current_length)
```
