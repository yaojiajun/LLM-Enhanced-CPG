```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Ensure numerical stability
    epsilon = 1e-8
    
    # Normalize input tensors
    delivery_node_demands_norm = delivery_node_demands / (delivery_node_demands.sum() + epsilon)
    current_load_norm = current_load / (current_load.sum() + epsilon)
    delivery_node_demands_open_norm = delivery_node_demands_open / (delivery_node_demands_open.sum() + epsilon)
    current_load_open_norm = current_load_open / (current_load_open.sum() + epsilon)
    
    # Adjusted denominator for avoiding inf
    current_length_denom = current_length + epsilon
    
    # Generate heuristic scores incorporating randomness
    heuristic_scores = (current_distance_matrix * torch.rand_like(current_distance_matrix)) / current_length_denom
    
    return heuristic_scores
```
