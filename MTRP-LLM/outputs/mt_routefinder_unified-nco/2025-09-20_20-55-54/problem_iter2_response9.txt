```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    delivery_node_demands_norm = delivery_node_demands / (torch.abs(delivery_node_demands).max() + 1e-8)
    current_load_norm = current_load / (torch.abs(current_load).max() + 1e-8)
    delivery_node_demands_open_norm = delivery_node_demands_open / (torch.abs(delivery_node_demands_open).max() + 1e-8)
    current_load_open_norm = current_load_open / (torch.abs(current_load_open).max() + 1e-8)

    # Introduce adaptive adjustments based on input interactions
    heuristic_scores = current_distance_matrix * 0.5  # Placeholder score computation

    # Add diversity in score adjustments based on input interactions
    heuristic_scores += torch.randn_like(heuristic_scores) * 0.1

    # Clamp scores to avoid invalid values
    heuristic_scores = torch.clamp(heuristic_scores, -1e3, 1e3)

    return heuristic_scores
```
