```python
import torch
import torch.nn.functional as F

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Normalize distances for stability
    norm_current_distance_matrix = F.normalize(current_distance_matrix, p=1, dim=1)

    # Random noise for exploration
    noise = torch.rand_like(norm_current_distance_matrix) * 1e-6

    # Apply noise to distances
    perturbed_distances = norm_current_distance_matrix + noise

    # Calculate heuristic score based on normalized and perturbed distances
    heuristic_score = 1 / (perturbed_distances + 1e-8)  # Add epsilon to prevent division by zero

    return heuristic_score

```
