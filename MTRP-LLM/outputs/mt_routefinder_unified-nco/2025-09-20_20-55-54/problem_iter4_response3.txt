```python
import torch

def heuristics_v2(current_distance_matrix, delivery_node_demands, current_load, delivery_node_demands_open, current_load_open, time_windows, arrival_times, pickup_node_demands, current_length):
    
    # Ensure numerical stability
    epsilon = 1e-8
    
    # Normalize input tensors with dynamic ranges
    delivery_node_demands_norm = delivery_node_demands / (delivery_node_demands.max(dim=0)[0] + epsilon)
    current_load_norm = current_load / (current_load.max() + epsilon)
    delivery_node_demands_open_norm = delivery_node_demands_open / (delivery_node_demands_open.max(dim=0)[0] + epsilon)
    current_load_open_norm = current_load_open / (current_load_open.max() + epsilon)
    
    # Compute heuristic scores based on problem-specific constraints and insights
    heuristic_scores = torch.rand_like(current_distance_matrix)  # Placeholder for actual heuristic computation

    return heuristic_scores
```
