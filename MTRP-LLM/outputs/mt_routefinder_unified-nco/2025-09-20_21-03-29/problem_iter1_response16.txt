```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Modify heuristic calculations
    distance_heuristic = 1.0 / (current_distance_matrix + 1e-8)  # Better edges have shorter distances

    remaining_capacity = current_load.unsqueeze(1) - delivery_node_demands.unsqueeze(0)

    # Clamp and mask infeasible values
    remaining_capacity = torch.where(remaining_capacity >= 0, remaining_capacity, torch.zeros_like(remaining_capacity))
    remaining_capacity_open = current_load_open.unsqueeze(1) - delivery_node_demands_open.unsqueeze(0)
    remaining_capacity_open = torch.where(remaining_capacity_open >= 0, remaining_capacity_open, torch.zeros_like(remaining_capacity_open))

    # Generate delivery and pickup scores
    delivery_score = 1.0 / (remaining_capacity + 1e-8)  # Higher scores for nodes with remaining capacity to deliver
    pickup_score = 1.0 / (pickup_node_demands.unsqueeze(0) + 1e-8)  # Higher scores for nodes requiring smaller pickups

    total_score = distance_heuristic + delivery_score + pickup_score

    return total_score

```  
