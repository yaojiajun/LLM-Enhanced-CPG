```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:

    # Ensure input tensors are on the correct device for GPU support
    device = current_distance_matrix.device

    # Unpacking parameters for clarity
    n_nodes = current_distance_matrix.size(1)  # Number of nodes including depot
    n_trajectories = current_distance_matrix.size(0)  # Number of vehicle trajectories

    # Initialize the heuristic score matrix
    heuristic_scores = torch.zeros_like(current_distance_matrix, device=device)

    # Compute feasible delivery nodes based on current load
    feasible_delivery = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    # Compute feasible pickup nodes for the open case
    feasible_pickup_open = (current_load_open.unsqueeze(1) >= pickup_node_demands.unsqueeze(0)).float()

    # Calculate time window feasibility
    time_window_feasibility = ((arrival_times.unsqueeze(2) + current_distance_matrix <= time_windows[:, :, 1].unsqueeze(0)) &
                                (arrival_times.unsqueeze(2) + current_distance_matrix >= time_windows[:, :, 0].unsqueeze(0))).float()

    # Compute effective travel time penalties
    travel_penalty = 1 - (current_distance_matrix / current_length.unsqueeze(1).clamp(min=1e-6)).unsqueeze(0)

    # Combine all considerations into the heuristic score matrix
    heuristic_scores += feasible_delivery * time_window_feasibility * travel_penalty

    # Incorporate randomness to avoid local optima
    randomness = torch.rand_like(heuristic_scores) * 0.1  # Adjust randomness effect as necessary
    heuristic_scores += randomness

    # Return heuristic scores: Positive scores for promising edges, negative for undesirable ones
    return heuristic_scores
```
