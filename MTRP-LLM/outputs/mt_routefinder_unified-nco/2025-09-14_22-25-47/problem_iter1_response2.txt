```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Initializations
    num_nodes = current_distance_matrix.shape[1]
    pomo_size = current_distance_matrix.shape[0]
    
    # Calculate capacity feasibility
    delivery_capacity = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    open_capacity = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0)).float()
    
    # Calculate time window feasibility
    time_windows_start = time_windows[:, 0]
    time_windows_end = time_windows[:, 1]
    
    arrival_time_feasibility = (
        (arrival_times.unsqueeze(1) + current_distance_matrix <= time_windows_end.unsqueeze(0)).float() * 
        (arrival_times.unsqueeze(1) + current_distance_matrix >= time_windows_start.unsqueeze(0)).float()
    )
    
    # Calculate length feasibility
    length_feasibility = (current_length.unsqueeze(1) >= current_distance_matrix.sum(dim=0)).float()
    
    # Compute heuristic scores
    base_scores = -current_distance_matrix * delivery_capacity * open_capacity * arrival_time_feasibility * length_feasibility

    # Introduce randomness to scores to enhance exploration
    random_noise = (torch.rand_like(base_scores) - 0.5) * 0.1
    heuristic_scores = base_scores + random_noise

    return heuristic_scores
```
