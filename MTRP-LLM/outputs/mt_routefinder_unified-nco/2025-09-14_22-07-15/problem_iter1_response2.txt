```python
import torch
import torch.nn.functional as F
import random

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    pomo_size, N_plus_1 = current_distance_matrix.size()
    
    # Generate random weights for each edge
    edge_weights = torch.rand((pomo_size, N_plus_1))
    
    # Compute heuristic score matrix based on distance, load, time, arrivals, pickup demands, and route length
    score_matrix = current_distance_matrix / torch.max(current_distance_matrix)
    score_matrix *= current_load.unsqueeze(1) / torch.max(current_load)
    score_matrix *= current_length.unsqueeze(1) / torch.max(current_length)
    # Introduce randomness to avoid local optima
    score_matrix += torch.rand((pomo_size, N_plus_1))
    
    return score_matrix
```
