```python
import torch
import torch.nn.functional as F

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Compute heuristic indicators based on multiple constraints and prior heuristics
    
    # Combine different heuristics and constraints to calculate heuristic scores
    total_demand = delivery_node_demands + pickup_node_demands
    total_load_ratio = current_load / total_demand
    total_distance_norm = current_distance_matrix / current_distance_matrix.max()
    time_window_diff = time_windows[:, 1] - arrival_times[:, 1]
    length_ratio = current_length / current_distance_matrix.max()
    
    # Generate heuristic score matrix
    heuristic_scores = total_load_ratio + total_distance_norm - time_window_diff + length_ratio
    heuristic_scores = F.relu(heuristic_scores)  # Apply ReLU to ensure non-negative scores
    
    return heuristic_scores
```
