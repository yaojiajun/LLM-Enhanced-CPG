```python
import torch
import torch.nn.functional as F

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Compute heuristic scores based on different components
    score_capacity = torch.div(torch.abs(delivery_node_demands - current_load), current_load)
    score_time = F.relu(-(time_windows[:, 0] - arrival_times) + (time_windows[:, 1] - arrival_times))
    score_pickup = torch.div(pickup_node_demands, current_load_open)
    score_length = torch.div(torch.abs(current_length), current_length.max())
    
    # Combine the scores to compute the final heuristic score matrix
    heuristic_scores = score_capacity + score_time + score_pickup + score_length
    
    return heuristic_scores
```
