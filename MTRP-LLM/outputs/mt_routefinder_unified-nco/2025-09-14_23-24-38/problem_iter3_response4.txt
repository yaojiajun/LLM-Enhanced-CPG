```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:

    # Calculate potential delivery feasibility based on current load and demands
    feasible_deliveries = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    
    # Calculate potential pickups feasibility
    feasible_pickups = (current_load_open.unsqueeze(1) >= pickup_node_demands.unsqueeze(0)).float()
    
    # Time window feasibility
    current_time = arrival_times.unsqueeze(1)
    time_window_open = ((current_time >= time_windows[:, 0].unsqueeze(0)) & 
                        (current_time <= time_windows[:, 1].unsqueeze(0))).float()
    
    # Duration feasibility
    duration_feasibility = (current_length.unsqueeze(1) >= current_distance_matrix).float()

    # Combine feasibility into a score mask
    feasibility_mask = feasible_deliveries * feasible_pickups * time_window_open * duration_feasibility
    
    # Calculate heuristic scores with weighted criteria
    distance_scores = 1 / (current_distance_matrix + 1e-6)  # Avoid division by zero
    heuristic_scores = feasibility_mask * distance_scores

    # Enhance randomness in the score computation
    randomness_factor = torch.rand_like(heuristic_scores) * 0.1  # Randomness to the scores
    heuristic_scores += randomness_factor

    # Normalize the scores to prevent saturation
    heuristic_scores = (heuristic_scores - heuristic_scores.min(dim=1, keepdim=True)[0]) / \
                       (heuristic_scores.max(dim=1, keepdim=True)[0] - heuristic_scores.min(dim=1, keepdim=True)[0] + 1e-6)

    return heuristic_scores
```
