```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Heuristic score matrix initialization
    num_vehicles, num_nodes = current_distance_matrix.shape
    heuristic_scores = torch.zeros((num_vehicles, num_nodes), device=current_distance_matrix.device)

    # Calculate potential delivery scores based on demands and load capacity
    delivery_capacity_mask = (delivery_node_demands.unsqueeze(0) <= current_load.unsqueeze(1)).float()
    delivery_scores = delivery_capacity_mask * (1.0 / (current_distance_matrix + 1e-5))

    # Compute time window feasibility
    current_time = arrival_times
    time_window_mask = ((current_time.unsqueeze(1) >= time_windows[:, 0].unsqueeze(0)) & (current_time.unsqueeze(1) <= time_windows[:, 1].unsqueeze(0))).float()

    # Calculate combined scores with respect to time windows
    combined_scores = delivery_scores * time_window_mask

    # Incorporate backhaul demands where applicable
    backhaul_capacity_mask = (pickup_node_demands.unsqueeze(0) <= current_load_open.unsqueeze(1)).float()
    backhaul_scores = backhaul_capacity_mask * (1.0 / (current_distance_matrix + 1e-5))

    # Adjust scores for backhauls and blend forward delivery with backhaul
    heuristic_scores += combined_scores + 0.5 * backhaul_scores

    # Apply randomness based on the constraint severity
    constraint_severity = 1.0 - ((current_load.unsqueeze(1) / delivery_node_demands.unsqueeze(0)).clamp(0, 1))
    random_factor = torch.rand_like(heuristic_scores) * constraint_severity
    heuristic_scores += random_factor

    # Final normalization to avoid dominance by random factors
    heuristic_scores = (heuristic_scores - heuristic_scores.min()) / (heuristic_scores.max() - heuristic_scores.min() + 1e-5)
    
    return heuristic_scores
```
