```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Calculate heuristic scores based on distance and load constraints
    load_constraints = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()  # Shape: (pomo_size, N+1)
    load_constraints_open = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0)).float()  # Shape: (pomo_size, N+1)
    
    time_constraints = (arrival_times < time_windows[:, 1].unsqueeze(0)) & (arrival_times >= time_windows[:, 0].unsqueeze(0))  # Shape: (pomo_size, N+1)

    # Duration constraints
    duration_constraints = (current_length.unsqueeze(1) >= current_distance_matrix).float()  # Shape: (pomo_size, N+1)

    # Calculate a base score using a combination of distance and capacity
    base_scores = 1 / (1 + current_distance_matrix)  # Avoid division by zero; Shape: (pomo_size, N+1)

    # Combine all constraints to filter valid edges
    valid_edges = load_constraints * load_constraints_open * time_constraints.float() * duration_constraints
    heuristic_scores = base_scores * valid_edges  # Shape: (pomo_size, N+1)

    # Introduce randomness to avoid local optima
    randomness = torch.rand_like(heuristic_scores) * valid_edges  # Keeping randomness only on valid edges
    heuristic_scores += randomness * valid_edges

    # Normalize scores to a [0, 1] range 
    heuristic_scores /= (heuristic_scores.max(dim=1, keepdim=True)[0] + 1e-9)  # Prevent division by zero

    return heuristic_scores
```
