```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor,
                  current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor,
                  current_load_open: torch.Tensor, time_windows: torch.Tensor,
                  arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor,
                  current_length: torch.Tensor) -> torch.Tensor:
    
    # Initialize heuristic score matrix
    pomo_size, N_plus_1 = current_distance_matrix.shape
    heuristic_scores = torch.zeros((pomo_size, N_plus_1), device=current_distance_matrix.device)

    # Conditions for feasible visits
    feasible_delivery = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0))
    feasible_delivery_open = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0))
    time_feasibility = ((arrival_times + current_distance_matrix >= time_windows[:, 0].unsqueeze(0)) & 
                        (arrival_times + current_distance_matrix <= time_windows[:, 1].unsqueeze(0)))
    duration_feasibility = (current_length.unsqueeze(1) >= current_distance_matrix)

    # Calculate attractiveness scores
    attractiveness = 1 / current_distance_matrix  # Inverse of distance as attractiveness
  
    # Base scores
    base_scores = attractiveness * feasible_delivery.float() * feasible_delivery_open.float() * time_feasibility.float() * duration_feasibility.float()
    
    # Factor in time window penalties
    too_early = (time_windows[:, 0].unsqueeze(0) - arrival_times < 0).float()
    too_late = (time_windows[:, 1].unsqueeze(0) - arrival_times < 0).float()
    time_window_penalty = too_early - too_late * 2  # Favor nodes within time windows, penalize too late sharply
    
    # Combine base scores with time window adjustments
    heuristic_scores = base_scores + base_scores * time_window_penalty
    
    # Introduce enhanced randomness to avoid local optima
    random_factors = (torch.rand(pomo_size, N_plus_1, device=current_distance_matrix.device) - 0.5) * 0.1
    heuristic_scores += random_factors

    return heuristic_scores
```
