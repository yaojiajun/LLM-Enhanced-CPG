```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Initialize heuristic score matrix
    score_matrix = torch.zeros_like(current_distance_matrix)

    # Constraints evaluation
    feasible_deliveries = (delivery_node_demands.unsqueeze(0) <= current_load.unsqueeze(1)).float()
    feasible_open_deliveries = (delivery_node_demands_open.unsqueeze(0) <= current_load_open.unsqueeze(1)).float()

    # Time window constraints
    time_window_constraints = ((arrival_times.unsqueeze(1) + current_distance_matrix) >= time_windows[:, 0].unsqueeze(0)).float() * \
                              ((arrival_times.unsqueeze(1) + current_distance_matrix) <= time_windows[:, 1].unsqueeze(0)).float()

    # Duration limits
    feasible_length = (current_length.unsqueeze(1) >= current_distance_matrix).float()
    
    # Combine feasibility matrices
    combined_feasibility = feasible_deliveries * feasible_length * time_window_constraints + \
                           feasible_open_deliveries * feasible_length * time_window_constraints

    # Calculate scores using insights from the distance
    score_matrix += combined_feasibility * (-current_distance_matrix)

    # Introducing randomness to avoid local optima
    random_scores = torch.randn_like(score_matrix) * 0.1
    score_matrix += random_scores

    return score_matrix
```
