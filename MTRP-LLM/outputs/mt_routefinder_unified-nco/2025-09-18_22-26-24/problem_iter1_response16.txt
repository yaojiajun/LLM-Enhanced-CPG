```python
import torch
import torch.nn.functional as F
import numpy as np

def heuristics_v2(current_distance_matrix, delivery_node_demands, current_load, delivery_node_demands_open, current_load_open, time_windows, arrival_times, pickup_node_demands, current_length):
    # Calculate load capacity status
    load_status = (current_load - delivery_node_demands >= 0).float()
    
    # Calculate load capacity status for open routes
    load_status_open = (current_load_open - delivery_node_demands_open >= 0).float()

    # Calculate waiting time violation
    earliness = F.relu(arrival_times - time_windows[:,0])
    lateness = F.relu(time_windows[:,1] - arrival_times)
    wait_time = torch.max(earliness, lateness)

    # Normalize waiting time
    wait_time = wait_time / (torch.max(time_windows[:,1]) - torch.min(time_windows[:,0]))

    # Create heuristic score matrix
    score_matrix = current_distance_matrix + 0.5*wait_time.unsqueeze(0) - 0.2*load_status.unsqueeze(0) + 0.3*load_status_open.unsqueeze(0)

    return score_matrix

```  
