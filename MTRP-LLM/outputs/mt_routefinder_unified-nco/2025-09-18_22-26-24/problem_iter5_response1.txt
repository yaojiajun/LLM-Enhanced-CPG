```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Introduce enhanced randomness
    random_noise = 0.1 * torch.rand_like(current_distance_matrix)
    
    # Fuse innovative strategies with creative heuristics
    heuristic_indicators = current_distance_matrix + random_noise
    
    # Balance randomness effectively
    heuristic_indicators -= 0.5 * torch.abs(torch.rand_like(current_distance_matrix) - 0.5)

    # Utilize GPU optimization by keeping all operations tensor-based
    heuristic_indicators = heuristic_indicators.cuda()

    # Apply node-specific constraints for robust solutions
    heuristic_indicators -= 0.2 * delivery_node_demands
    heuristic_indicators -= 0.1 * current_load
    heuristic_indicators -= 0.2 * delivery_node_demands_open
    heuristic_indicators -= 0.1 * current_load_open
    heuristic_indicators -= 0.3 * time_windows[:, 0]  # Using the earliest service times as constraints

    return heuristic_indicators
```
