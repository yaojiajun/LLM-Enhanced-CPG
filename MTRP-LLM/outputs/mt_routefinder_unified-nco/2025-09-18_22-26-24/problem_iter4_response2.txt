```python
import torch

def heuristics_v2(current_distance_matrix, delivery_node_demands, current_load, delivery_node_demands_open, current_load_open, time_windows, arrival_times, pickup_node_demands, current_length):
    # Compute heuristic indicators based on node constraints, objectives, and enhanced randomness
    randomness = torch.rand_like(current_distance_matrix)  # Generate random values for introducing randomness
    capacity_feasibility = ((current_load - delivery_node_demands) >= 0).float()  # Check capacity feasibility
    time_window_feasibility = ((arrival_times >= time_windows[:, 0]) & (arrival_times <= time_windows[:, 1])).float()  # Check time window feasibility
    length_feasibility = ((current_length - current_distance_matrix) >= 0).float()  # Check route length feasibility
    pickup_capacity_feasibility = ((current_load + pickup_node_demands) <= 1).float()  # Check capacity for pickups feasibility
    
    # Combine the above constraints and introduce randomness
    heuristic_scores = (randomness + capacity_feasibility + time_window_feasibility - length_feasibility - pickup_capacity_feasibility)
    
    return heuristic_scores
```
