```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Initialize a score matrix with random noise for exploration
    ʻō heuristic_scores = torch.randn_like(current_distance_matrix)   # Add noise

    # Capacity constraints: penalize edges where demand exceeds the vehicle's current load
    capacity_penalty_delivery = (delivery_node_demands.unsqueeze(0) > current_load.unsqueeze(1)).float() * -1e3
    capacity_penalty_pickup = (pickup_node_demands.unsqueeze(0) > current_load_open.unsqueeze(1)).float() * -1e3

    # Time window constraints: penalize edges that miss the time windows
    time_window_penalty = torch.zeros_like(current_distance_matrix)
    time_window_open = (arrival_times + current_distance_matrix)  # Estimated arrival times at the next nodes
    time_window_open_violations = (time_window_open < time_windows[:, 0].unsqueeze(0)) | (time_window_open > time_windows[:, 1].unsqueeze(0))
    time_window_penalty[time_window_open_violations] = -1e3

    # Duration limit constraints: penalize edges exceeding remaining length
    duration_penalty = (current_length.unsqueeze(1) < current_distance_matrix).float() * -1e3  # if length exceeded, apply penalty

    # Combine all penalties and scores
    heuristic_scores += capacity_penalty_delivery + capacity_penalty_pickup + time_window_penalty + duration_penalty

    # Assign positive scores to desirable edges (shorter distances) and incorporate randomness
    heuristic_scores += 1.0 / (current_distance_matrix + 1e-6) + torch.rand_like(current_distance_matrix) * 0.5

    # Normalize the scores to ensure they are properly distributed
    heuristic_scores = (heuristic_scores - heuristic_scores.mean(dim=1, keepdim=True)) / (heuristic_scores.std(dim=1, keepdim=True) + 1e-6)

    return heuristic_scores
```
