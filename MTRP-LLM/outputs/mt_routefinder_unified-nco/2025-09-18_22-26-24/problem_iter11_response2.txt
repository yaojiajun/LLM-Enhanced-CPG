```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Initialize heuristic score matrix
    heuristic_scores = torch.zeros_like(current_distance_matrix)
    
    # Calculate base scores based on distance
    distance_scores = -current_distance_matrix
    
    # Calculate load feasibility
    load_feasibility = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    load_feasibility_open = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0)).float()
    
    # Calculate time window feasibility
    time_feasibility = ((arrival_times + current_distance_matrix) <= time_windows[:, 1].unsqueeze(0)).float()
    wait_time_penalty = (time_windows[:, 0].unsqueeze(0) - arrival_times - current_distance_matrix).clamp(min=0)
    
    # Calculate current length feasibility
    length_feasibility = (current_length.unsqueeze(1) >= current_distance_matrix).float()

    # Adaptive noise to enhance exploration
    noise = torch.rand_like(distance_scores) * 0.1  # Introducing small random noise
    
    # Heuristic score adjustments
    heuristic_scores += (distance_scores * load_feasibility * load_feasibility_open * time_feasibility * length_feasibility)
    heuristic_scores += noise  # adding noise for exploration
    
    # Penalize for waiting times at time windows
    heuristic_scores -= wait_time_penalty

    return heuristic_scores
```
