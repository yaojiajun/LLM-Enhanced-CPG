```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Constants for calculations
    epsilon = 1e-5  # Small value to avoid division errors
    POMO_size, N_plus_1 = current_distance_matrix.shape
    
    # Calculate remaining capacity constraints
    delivery_capacity_constraint = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    pickup_capacity_constraint = (current_load_open.unsqueeze(1) >= pickup_node_demands.unsqueeze(0)).float()
    
    # Time window constraints
    current_time = arrival_times.unsqueeze(1) + current_distance_matrix
    time_window_constraint = ((current_time >= time_windows[:, 0].unsqueeze(0)) & (current_time <= time_windows[:, 1].unsqueeze(0))).float()
    
    # Duration constraints
    duration_constraint = (current_length.unsqueeze(1) >= current_distance_matrix).float()
    
    # Calculate heuristic scores with considerations
    heuristic_scores = (delivery_capacity_constraint * pickup_capacity_constraint * time_window_constraint * duration_constraint) * (-current_distance_matrix)
    
    # Introduce randomness for exploration to avoid local optima
    randomness_factor = torch.rand_like(heuristic_scores) * 0.1  # Controlled randomness
    heuristic_scores += randomness_factor
    
    return heuristic_scores
```
