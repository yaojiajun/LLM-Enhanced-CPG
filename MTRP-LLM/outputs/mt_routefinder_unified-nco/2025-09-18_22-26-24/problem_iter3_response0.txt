```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    # Calculate feasibility matrices for deliveries and pickups
    delivery_feasibility = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    pickup_feasibility = (current_load_open.unsqueeze(1) >= pickup_node_demands.unsqueeze(0)).float()
    
    # Determine whether we can serve the customers within their time windows
    earliest_arrivals = arrival_times + current_distance_matrix
    time_window_feasibility = ((earliest_arrivals >= time_windows[:, 0].unsqueeze(0)) &
                                (earliest_arrivals <= time_windows[:, 1].unsqueeze(0))).float()
    
    # Calculate effective heuristic scores
    heuristic_scores = (
        delivery_feasibility * pickup_feasibility * time_window_feasibility * 
        (1.0 / (current_distance_matrix + 1e-6))  # Inverse of distance as a factor
    )
    
    # Introduce randomness to avoid local optima (random perturbation)
    randomness = torch.rand_like(heuristic_scores) * 0.1  # Adjust the scale as necessary
    heuristic_scores += randomness
    
    # Apply the current length constraint
    length_constraint = (current_length.unsqueeze(1) >= current_distance_matrix.sum(dim=1)).float()
    heuristic_scores *= length_constraint
    
    # Return the heuristic score matrix
    return heuristic_scores
```
