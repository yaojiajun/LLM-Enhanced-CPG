```python
def heuristics_v2(current_distance_matrix, delivery_node_demands, current_load, delivery_node_demands_open, current_load_open, time_windows, arrival_times, pickup_node_demands, current_length):
    
    # Compute heuristic indicators based on node constraints and balanced randomness
    random_scores = torch.rand_like(current_distance_matrix)
    demand_scores = delivery_node_demands / current_load
    time_scores = (time_windows[:, 0] - arrival_times) + (arrival_times - time_windows[:, 1])
    pickup_scores = pickup_node_demands / current_load
    length_scores = current_length / current_distance_matrix
    
    heuristic_scores = random_scores + demand_scores - time_scores + pickup_scores - length_scores
    
    return heuristic_scores
```
