```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    # Constants for penalties
    time_window_penalty = 1000
    capacity_penalty = 1000
    length_penalty = 1000

    # Calculate time window feasibility
    arrival_times_min = arrival_times + current_distance_matrix
    time_window_violations = (arrival_times_min < time_windows[:, 0]) | (arrival_times_min > time_windows[:, 1])
    
    # Calculate capacity feasibility
    capacity_violations_delivery = (current_load.unsqueeze(1) < delivery_node_demands.unsqueeze(0))
    capacity_violations_pickup = (current_load_open.unsqueeze(1) < pickup_node_demands.unsqueeze(0))

    # Calculate route length feasibility
    length_violations = (current_length.unsqueeze(1) < current_distance_matrix)

    # Initialize heuristic scores as negative infinity
    heuristic_scores = torch.full(current_distance_matrix.shape, float('-inf'))

    # Base heuristic as negative distances where feasible
    feasible_edges = ~(time_window_violations | capacity_violations_delivery | capacity_violations_pickup | length_violations)
    heuristic_scores[feasible_edges] = -current_distance_matrix[feasible_edges]

    # Apply penalties for violations
    heuristic_scores[time_window_violations] += time_window_penalty
    heuristic_scores[capacity_violations_delivery] += capacity_penalty
    heuristic_scores[capacity_violations_pickup] += capacity_penalty
    heuristic_scores[length_violations] += length_penalty

    # Introduce randomness to avoid local optima
    noise = torch.randn_like(heuristic_scores) * 0.1
    heuristic_scores += noise

    # Normalize scores to promote exploration
    heuristic_scores = (heuristic_scores - heuristic_scores.mean(dim=1, keepdim=True)) / (heuristic_scores.std(dim=1, keepdim=True) + 1e-6)

    return heuristic_scores
```
