```python
import torch
import torch.nn.functional as F

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Perform some computations based on the inputs to generate heuristic indicators
    heuristic_indicators = torch.rand_like(current_distance_matrix)  # Example random heuristic indicators
    
    # Apply enhanced randomness for diverse exploration
    heuristic_indicators += torch.randn_like(heuristic_indicators) * 0.1
    
    # Apply node-specific constraints for robust solutions
    heuristic_indicators *= torch.where(delivery_node_demands > 0, torch.tensor(1.5), torch.tensor(1.0))
    heuristic_indicators *= torch.where(current_length < 50, torch.tensor(1.2), torch.tensor(1.0))
    
    # Utilize GPU optimization through vectorized operations
    heuristic_indicators = F.normalize(heuristic_indicators, p=2, dim=1)
    
    return heuristic_indicators
```
