```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Initialize heuristic score matrix
    heuristic_scores = torch.zeros_like(current_distance_matrix)
    
    # Calculate feasibility factors based on vehicle capacity and demands
    capacity_feasibility = (current_load.unsqueeze(-1) >= delivery_node_demands.unsqueeze(0)).float()
    capacity_feasibility_open = (current_load_open.unsqueeze(-1) >= delivery_node_demands_open.unsqueeze(0)).float()
    
    # Calculate time window feasibility
    current_time = arrival_times.unsqueeze(-1) + current_distance_matrix
    time_feasibility = ((current_time >= time_windows[:, 0].unsqueeze(0)) & (current_time <= time_windows[:, 1].unsqueeze(0))).float()
    
    # Calculate length feasibility based on the remaining route duration
    length_feasibility = (current_length.unsqueeze(-1) >= current_distance_matrix).float()

    # Combine feasibility factors with dynamic noise to enhance randomness in exploration
    noise = torch.rand_like(current_distance_matrix) * 0.1  # Adjust noise level as desired
    feasibility_score = capacity_feasibility * capacity_feasibility_open * time_feasibility * length_feasibility

    # Calculate heuristic indicators with penalties
    heuristic_indicators = feasibility_score * (1 / (current_distance_matrix + 1e-6)) + noise  # Avoid division by zero

    # Assign scores based on heuristics
    heuristic_scores += heuristic_indicators
    
    # Apply penalties for time window violations
    time_window_penalty = (time_windows[:, 0].unsqueeze(0) < arrival_times.unsqueeze(-1)).float() * -1.0  # Penalize late arrivals
    heuristic_scores += time_window_penalty * (1 - feasibility_score)  # Adjust scores where infeasible

    return heuristic_scores
```
