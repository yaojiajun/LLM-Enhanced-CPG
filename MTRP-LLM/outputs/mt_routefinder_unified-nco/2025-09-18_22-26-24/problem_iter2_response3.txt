```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Your improved heuristics_v2 implementation here
    
    # Compute heuristic indicators based on a combination of node characteristics and constraints to guide edge selection
    
    # Example: Calculate a heuristic score matrix based on load, time windows, and distance matrix
    load_indicator = current_load.unsqueeze(2) / delivery_node_demands.unsqueeze(0)
    time_window_indicator = (arrival_times - time_windows[:, 0].unsqueeze(0)) / (time_windows[:, 1] - time_windows[:, 0]).unsqueeze(0)
    distance_factor = 1 / (current_distance_matrix + 1e-6)  # Avoid division by zero
    heuristic_scores = load_indicator + time_window_indicator - distance_factor
    
    return heuristic_scores
```
