```python
import torch
import torch.nn.functional as F

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Calculate heuristic scores based on various criteria such as distance, load constraints, time windows, pickup demands, length constraints, etc.
    distance_scores = 1.0 / (current_distance_matrix + 1e-6)  # Inverse of distance matrix
    load_scores = torch.abs(delivery_node_demands - current_load)  # Score based on load constraints
    time_scores = torch.clamp((arrival_times - time_windows[:, 1]).unsqueeze(0), min=0)  # Score based on exceeding time windows
    pickup_scores = pickup_node_demands  # Score based on pickup demands
    
    # Aggregate different scores with weights
    total_scores = distance_scores + 0.5*load_scores - 0.8*time_scores + 0.3*pickup_scores
    
    return total_scores

```
