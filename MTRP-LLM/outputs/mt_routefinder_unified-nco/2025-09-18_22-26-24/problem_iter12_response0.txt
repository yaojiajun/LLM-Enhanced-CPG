```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Heuristic score matrix initialization
    heuristic_scores = torch.zeros_like(current_distance_matrix)
    
    # Demand and capacity constraints
    load_constraints = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    load_constraints_open = (current_load_open.unsqueeze(1) >= delivery_node_demands_open.unsqueeze(0)).float()
    
    # Time window feasibility
    time_constraints = ((arrival_times + current_distance_matrix) >= time_windows[:, 0].unsqueeze(0)).float() * \
                      ((arrival_times + current_distance_matrix) <= time_windows[:, 1].unsqueeze(0)).float()
    
    # Duration limits
    duration_constraints = (current_length.unsqueeze(1) >= current_distance_matrix).float()
    
    # Combined constraints
    feasible_nodes = load_constraints * load_constraints_open * time_constraints * duration_constraints
    
    # Heuristic scoring
    heuristic_scores = feasible_nodes * (1 / (current_distance_matrix + 1e-5))  # Inverse distance as a measure of desirability

    # Enhance randomness based on quality â€“ higher scores get more randomness
    score_quality = heuristic_scores.sum(dim=1, keepdim=True) 
    randomness_factor = torch.rand_like(heuristic_scores) * score_quality / (score_quality.max() + 1e-5)
    
    # Final score calculation
    heuristic_scores += randomness_factor

    # Ensure negative scores for undesirable routes
    heuristic_scores[feasible_nodes == 0] = -torch.inf

    return heuristic_scores
```
