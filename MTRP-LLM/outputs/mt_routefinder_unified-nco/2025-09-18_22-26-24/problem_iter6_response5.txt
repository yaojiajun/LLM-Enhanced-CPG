```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Calculate heuristic indicators incorporating domain-specific insights and enhanced randomness
    random_values = torch.rand_like(current_distance_matrix)  # Generate random values for exploration
    delivery_capacity_ratio = current_load / delivery_node_demands
    open_delivery_capacity_ratio = current_load_open / delivery_node_demands_open
    time_window_diff = time_windows[:, 1] - arrival_times.sum(dim=0)
    pickup_capacity_ratio = current_load / pickup_node_demands
    length_ratio = current_length / current_distance_matrix.mean()

    # Combine heuristic indicators with randomness to guide edge selection
    heuristic_indicators = random_values * 0.2 + delivery_capacity_ratio - open_delivery_capacity_ratio + time_window_diff - pickup_capacity_ratio + length_ratio

    return heuristic_indicators
```
