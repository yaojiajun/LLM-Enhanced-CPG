```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:

    # Calculate feasibility flags for delivery and pickup based on current loads and demands
    delivery_feasible = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    pickup_feasible = (current_load_open.unsqueeze(1) >= pickup_node_demands.unsqueeze(0)).float()

    # Time window feasibility based on estimated arrival times
    arrival_windows = (arrival_times >= time_windows[:, 0].unsqueeze(0)).float() * \
                      (arrival_times <= time_windows[:, 1].unsqueeze(0)).float()

    # Compute distance scores for reachable nodes, including the constraints checks
    feasible_routes = delivery_feasible * pickup_feasible * arrival_windows
    heuristic_scores = feasible_routes * (1 / (current_distance_matrix + 1e-6))  # Inverse of distance for scoring

    # Normalize scores and apply randomness
    heuristic_scores = heuristic_scores / (torch.sum(heuristic_scores, dim=1, keepdim=True) + 1e-6)
    randomness = torch.rand_like(heuristic_scores) * 0.05  # Enhanced randomness factor
    heuristic_scores += randomness

    # Apply any bounds or constraints needed (optional)
    heuristic_scores = torch.clamp(heuristic_scores, min=0)

    return heuristic_scores
```
