```python
import torch
import torch.nn.functional as F

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Calculate heuristic scores based on specific heuristics or insights
     
    # Example: Direclty using the ratio of distance to delivery demand as a heuristic score
    distance_to_demand_ratio = current_distance_matrix / delivery_node_demands.unsqueeze(0)
    
    # Incorporate randomness to avoid local optima
    random_noise = torch.rand_like(distance_to_demand_ratio) * 0.01 # Small random noise tensor
    heuristic_scores = distance_to_demand_ratio + random_noise

    return heuristic_scores
```
