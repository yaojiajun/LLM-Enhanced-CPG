```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Introduce enhanced randomness for exploration
    exploration_factor = 0.3
    heuristic_indicators = torch.rand_like(current_distance_matrix) * exploration_factor  # Enhanced random exploration
    
    # Incorporate problem-specific factors
    # Example: Compute inverse of delivery demands as a factor influencing edge selection
    inverse_delivery_demands = 1 / delivery_node_demands[1:]
    
    # Update heuristic indicators based on problem-specific factors
    heuristic_indicators += inverse_delivery_demands.unsqueeze(0)  # Adding problem-specific factors
    
    # You can implement more domain-specific heuristics here
    
    return heuristic_indicators
```
