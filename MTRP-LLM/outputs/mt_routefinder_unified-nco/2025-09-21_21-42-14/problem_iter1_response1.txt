```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Modify the calculation of distance-based heuristic score with emphasis on different randomness levels
    normalized_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.9

    # Modify the delivery-based heuristic score calculation to derive additional emphasis on low-demand nodes and different noise levels
    demand_scores = (current_load.unsqueeze(1) - delivery_node_demands.unsqueeze(0)) * 0.5 + torch.min(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.3

    # Introduce varied noise levels for exploration and diversity
    enhanced_noise = torch.randn_like(current_distance_matrix) * 1.5

    # Integrate the modified heuristic scores with varied strategies for exploration
    heuristic_scores_v2 = normalized_distance_scores + demand_scores + enhanced_noise

    return heuristic_scores_v2
```
