```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # New heuristic version based on modified calculations for distance, delivery demands, and current load
    
    # Adjust the calculation of distance score based on a different function
    distance_heuristic = torch.exp(-current_distance_matrix / torch.std(current_distance_matrix))

    # Change in how the delivery score is computed
    delivery_score = delivery_node_demands * (1 - current_load / torch.max(current_load)) * 0.7

    # Modify the calculation of load score to emphasize remaining capacity
    load_score = (current_load_open / torch.sum(current_load_open)) * 0.9 + torch.abs(current_load - delivery_node_demands) * 0.3

    # Create a matrix for added randomness
    randomness_matrix = torch.randn_like(current_distance_matrix) * 0.5

    # Combine heuristic scores with updated calculations
    overall_scores = distance_heuristic + delivery_score.unsqueeze(0) + load_score.unsqueeze(1) + randomness_matrix

    return overall_scores
```
