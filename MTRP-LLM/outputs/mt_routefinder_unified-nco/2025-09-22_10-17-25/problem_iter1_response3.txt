```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores
    # Compute an alternative normalized distance-based heuristic score matrix with added randomness
    normalized_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(current_distance_matrix) * 0.7

    # Modify the demand-based heuristic score based on average demand and load ratio with increased randomness
    avg_demand = torch.mean(delivery_node_demands)
    avg_load = torch.mean(current_load)
    demand_scores = (delivery_node_demands/avg_demand - current_load/avg_load) * 0.9 + torch.randn_like(current_distance_matrix) * 0.5

    # Introduce more random noise for exploration
    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0

    # Combine the different heuristic scores
    cvrp_scores = normalized_distance_scores + demand_scores + enhanced_noise

    # Keep the rest of the function structure unchanged
    
    return cvrp_scores
```
