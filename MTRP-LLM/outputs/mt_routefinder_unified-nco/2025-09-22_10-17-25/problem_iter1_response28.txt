```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Custom modifications for heuristics_v2
    # Generate a modified version by combining normalized distance and demand-based scores differently

    delivery_sensitivity_factor = torch.mean(delivery_node_demands)

    # Adjust distance-based scores by multiplying with a sensitivity factor based on delivery demands
    modified_distance_scores = (-current_distance_matrix / torch.max(current_distance_matrix)) * delivery_sensitivity_factor

    # Adjust demand-based scores using uniqueness of current load constraints
    load_uniqueness_factor = torch.min(current_load) / torch.mean(current_load)

    modified_demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * load_uniqueness_factor

    # Introduce noise for exploration while maintaining diversity
    noise_factor = torch.randn_like(current_distance_matrix) * 0.9

    heuristics_v2_scores = modified_distance_scores + modified_demand_scores + noise_factor

    # Combine the modified distance, demand, and noise-based scores
    overall_scores = heuristics_v2_scores
           
    return overall_scores
```
