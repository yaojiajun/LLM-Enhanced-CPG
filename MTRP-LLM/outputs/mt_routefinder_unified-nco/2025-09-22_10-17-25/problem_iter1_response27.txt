```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # New distance heuristic calculation
    # Compute the distance-based heuristic score matrix with emphasis on shorter distances and randomness
    distance_scores = -current_distance_matrix / torch.mean(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.5
    
    # Modified delivery score calculation
    # Compute the demand-based heuristic score matrix with higher reward for satisfying delivery and reduced noise
    delivery_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 1.2 + torch.max(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.3

    # Demand score influence on the overall score
    cvrp_scores = distance_scores + delivery_scores

    # Keep other parts of the original heuristics function unchanged
    
    return cvrp_scores
    
```
