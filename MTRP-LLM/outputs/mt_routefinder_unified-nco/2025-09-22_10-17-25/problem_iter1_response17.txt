```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Heuristic calculation modification
    # Modify distance-based heuristic score calculation for priority choice in edge selection
    distance_heuristic = -current_distance_matrix / torch.max(current_distance_matrix) - torch.abs(delivery_node_demands).unsqueeze(0) * 0.1 + torch.randn_like(current_distance_matrix) * 0.7

    # Calculate delivery score variation to emphasize high-demand nodes for diverse choices
    delivery_score = ((1 / current_load).unsqueeze(1) - delivery_node_demands) * 0.6 + torch.randn_like(current_distance_matrix) * 0.5

    # Introduce a different noise pattern for exploration with enhanced randomness
    noise_variation = torch.randn_like(current_distance_matrix) * 1.5

    # Combine the different heuristic scores with varied strategies for balanced exploration
    total_scores = distance_heuristic + delivery_score + noise_variation

    return total_scores
```
