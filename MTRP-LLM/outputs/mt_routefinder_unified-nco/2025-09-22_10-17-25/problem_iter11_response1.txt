```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Customized heuristics for model v5 with modified distance, delivery, and load score calculations
    
    # Modify the calculation of distance score by taking the reciprocal of the current_distance_matrix
    distance_heuristic = 1.0 / (current_distance_matrix + 1e-6)  # Revised distance heuristic
    
    # Adjust the delivery score by incorporating a penalty term for high demands and reward scheme for low demands
    delivery_score = (torch.min(delivery_node_demands) - delivery_node_demands) * ((delivery_node_demands > 0).float()) * 0.3 - delivery_node_demands * 0.1
    
    # Change how the load score is calculated by introducing a term based on the ratio of current load to the mean load
    load_score = 1.0 - (current_load / current_load.mean())

    # Compute a random matrix for exploration
    randomness_matrix = torch.randn_like(current_distance_matrix) * 0.2

    # Combine heuristic scores with updated calculations
    overall_scores = distance_heuristic + delivery_score.unsqueeze(0) + load_score.unsqueeze(1) + randomness_matrix

    return overall_scores
```
