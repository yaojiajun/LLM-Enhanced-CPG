```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Modify the computation of normalized_distance_scores by incorporating a different weighting and noise factor
    normalized_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + torch.rand_like(current_distance_matrix) * 0.6

    # Modify the computation of demand_scores with a different influence of delivery node demands and exploration noise level
    demand_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.6 + torch.max(delivery_node_demands) / 2 + torch.rand_like(current_distance_matrix) * 0.3

    # Introduce controlled randomness for exploration with increased noise level for diverse exploration
    enhanced_noise = torch.rand_like(current_distance_matrix) * 2.5

    # Combine different heuristic scores with modified strategies for balanced exploration
    overall_scores = normalized_distance_scores + demand_scores + enhanced_noise
    
    return overall_scores
```
