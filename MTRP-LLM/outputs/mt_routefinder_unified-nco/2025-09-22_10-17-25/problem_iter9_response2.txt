```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Customized heuristics for model v5
    
    # Adjust the calculation of distance score based on a new power transformation
    distance_heuristic = 1 / (current_distance_matrix + 1e-6)**2  # Power transformation for distance heuristic
    
    # Change how the delivery score is calculated by normalizing the demands and inverting the score
    normalized_delivery = (delivery_node_demands - delivery_node_demands.min()) / (delivery_node_demands.max() + 1e-6)
    delivery_score = 1 - normalized_delivery
    
    # Modify the load score calculation by adding a penalty for low load to promote balanced loads
    low_load_penalty = 1 / (current_load + 1e-6)
    load_score = low_load_penalty
    
    # Compute a random matrix for exploration
    randomness_matrix = torch.randn_like(current_distance_matrix) * 0.2
    
    # Combine heuristic scores with updated calculations
    overall_scores = distance_heuristic + delivery_score.unsqueeze(0) + load_score.unsqueeze(1) + randomness_matrix

    return overall_scores
```
