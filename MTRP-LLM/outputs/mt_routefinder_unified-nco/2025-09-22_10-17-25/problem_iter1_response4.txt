```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Modify how distance heuristic, delivery score, and load balance contribute to the total score
    normalized_distance_scores = current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(
        current_distance_matrix) * 0.7

    delivery_scores = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.8 + torch.max(
        delivery_node_demands) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    load_balance_scores = torch.sum(current_load.unsqueeze(1) - delivery_node_demands) * 0.6 - torch.min(
        current_load) + torch.randn_like(current_distance_matrix) * 1.5

    # Incorporate the modified scores into total score calculation
    total_scores = normalized_distance_scores + delivery_scores + load_balance_scores

    return total_scores

```
