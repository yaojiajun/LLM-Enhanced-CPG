```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Customized heuristics for model v5

    # Change the calculation of distance score to emphasize shorter distances
    distance_heuristic = 1.0 / (current_distance_matrix + 1e-6)  # Inverse of distance heuristic

    # Modify the delivery score calculation to penalize higher demands
    delivery_score = torch.log(torch.max(delivery_node_demands) + 1) / (delivery_node_demands + 1) * 0.5

    # Adjust how the load score is computed by considering deviations from average load
    load_score = (current_load - current_load.mean()).abs() / (current_load.std() + 1e-6) * 0.4

    # Compute a random matrix for exploration
    randomness_matrix = torch.randn_like(current_distance_matrix) * 0.2

    # Combine heuristic scores with updated calculations
    overall_scores = distance_heuristic + delivery_score.unsqueeze(0) + load_score.unsqueeze(1) + randomness_matrix

    return overall_scores
```
