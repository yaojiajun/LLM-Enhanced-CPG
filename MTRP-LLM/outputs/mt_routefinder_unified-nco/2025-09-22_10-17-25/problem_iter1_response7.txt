```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores_v2
    # Modify the normalized distance-based heuristic score matrix calculation
    normalized_distance_scores_v2 = -torch.sqrt(current_distance_matrix) / torch.max(torch.sqrt(current_distance_matrix)) + torch.randn_like(
        current_distance_matrix) * 0.7

    # Modify the demand-based heuristic score matrix calculation
    reversed_delivery_node_demands = 1 / (delivery_node_demands + 0.01) # Prevent division by zero
    demand_scores_v2 = (reversed_delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.6 + torch.max(
        reversed_delivery_node_demands) / 3 + torch.randn_like(current_distance_matrix) * 0.4

    # Introduce increased randomness for exploration with higher noise level for improved diversity
    enhanced_noise = torch.randn_like(current_distance_matrix) * 2.0

    # Combine the modified heuristic scores with diversified strategies for balanced exploration
    cvrp_scores_v2 = normalized_distance_scores_v2 + demand_scores_v2 + enhanced_noise

    vrptw_scores, vrpb_scores, vrpl_scores, ovrp_scores = torch.zeros_like(current_distance_matrix), torch.zeros_like(current_distance_matrix), torch.zeros_like(current_distance_matrix), torch.zeros_like(current_distance_matrix)
        
    overall_scores_v2 = cvrp_scores_v2 + vrptw_scores + vrpb_scores + vrpl_scores + ovrp_scores

    return overall_scores_v2
```
