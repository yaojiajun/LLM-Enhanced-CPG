```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Adjustments to current_distance_matrix calculations
    normalized_distance_scores = -current_distance_matrix**2 / torch.max(current_distance_matrix**2) + torch.randn_like(
        current_distance_matrix) * 0.7

    # Adjustments to delivery_node_demands and current_load calculations
    demand_scores = (delivery_node_demands.unsqueeze(0) + current_load.unsqueeze(1)) * 0.8 + torch.max(
        torch.abs(delivery_node_demands - current_load)) / 2 + torch.randn_like(current_distance_matrix) * 0.5

    # Retain the remaining parts of the original heuristics_v1 function

    return normalized_distance_scores + demand_scores
```
