```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Customized heuristics for model v5
    
    # Adjust the calculation of distance score based on a new power transformation approach
    distance_heuristic = torch.pow(current_distance_matrix, 0.6) / (torch.max(current_distance_matrix) + 1e-6)  # Distance heuristic with power transformation
    
    # Change how the delivery score is calculated by considering a penalty scheme for high demands
    delivery_score = (delivery_node_demands - torch.mean(delivery_node_demands)) / (torch.max(delivery_node_demands) + 1e-6) * 0.5
    
    # Modify the calculation of load score by rewarding vehicles with near full capacity
    load_score = (current_load - 0.9) / (current_load + 1e-6) * 0.4

    # Compute a random matrix for exploration
    randomness_matrix = torch.randn_like(current_distance_matrix) * 0.2

    # Combine heuristic scores with updated calculations
    overall_scores = distance_heuristic + delivery_score.unsqueeze(0) + load_score.unsqueeze(1) + randomness_matrix

    return overall_scores
```
