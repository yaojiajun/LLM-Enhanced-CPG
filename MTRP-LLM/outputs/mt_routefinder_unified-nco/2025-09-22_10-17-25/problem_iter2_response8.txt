```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Modify the distance-based heuristic score matrix calculation by scaling with inverse values
    inverse_distance_scores = 1 / current_distance_matrix + torch.randn_like(current_distance_matrix) * 0.5

    # Adjust the delivery-based heuristic score matrix calculation by incorporating load ratios
    load_ratios = current_load.unsqueeze(1) / (delivery_node_demands.unsqueeze(0) + 0.01)  # Prevent division by zero
    delivery_scores_v2 = load_ratios * 0.8 + torch.max(load_ratios) / 3 + torch.randn_like(current_distance_matrix) * 0.2

    # Keep the rest of the calculations unchanged

    return inverse_distance_scores + delivery_scores_v2
```
