```python
import torch
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # cvrp_scores
    # Update the calculation for normalized distance-based heuristic score with added randomness and emphasis on saving routes based on remaining load capacities
    remaining_load_scores = current_load.unsqueeze(1) / delivery_node_demands.unsqueeze(0)
    normalized_distance_scores = -torch.sqrt(current_distance_matrix) + 1.0 / remaining_load_scores + torch.randn_like(current_distance_matrix) * 0.6

    # Update the calculation for demand-based heuristic score by considering load balance priorities adjusted by alternative detection measures
    load_balance_scores = torch.abs((delivery_node_demands - 0.6 * current_load - 0.4 * torch.max(current_load)) / (current_load + 1e-6))
    demand_scores = (1.2 * delivery_node_demands + torch.randn_like(current_distance_matrix) * 0.4) + 0.6 * load_balance_scores

    enhanced_noise = torch.randn_like(current_distance_matrix) * 1.6

    cvrp_scores = normalized_distance_scores + demand_scores + enhanced_noise

    # Rest of the code remains unchanged

    # Ensure outputs do not contain nan, inf, or -inf values
    return torch.clamp(overall_scores, min=torch.finfo(overall_scores.dtype).min, max=torch.finfo(overall_scores.dtype).max)
```
