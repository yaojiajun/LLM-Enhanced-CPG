```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Customized heuristics for model v5
    
    # Update the calculation of distance score with a logarithmic transformation
    distance_heuristic = torch.log(current_distance_matrix + 1) / (torch.max(current_distance_matrix) + 1e-6)  # Logarithmic distance heuristic
    
    # Change the delivery score calculation to prioritize nodes with high demands instead of low demands
    delivery_score = (torch.max(delivery_node_demands) - delivery_node_demands) * ((delivery_node_demands > 0).float()) * 0.3
    
    # Modify the load score calculation by adding a penalty term for load values close to zero
    load_score = current_load + 1 / (current_load.abs() + 1)
    
    # Compute a random matrix for exploration
    randomness_matrix = torch.randn_like(current_distance_matrix) * 0.2

    # Combine heuristic scores with updated calculations
    overall_scores = distance_heuristic + delivery_score.unsqueeze(0) + load_score.unsqueeze(1) + randomness_matrix

    return overall_scores
```
