```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Customized heuristics for model v5
    
    # Adjust the calculation of distance score based on a new scaling approach
    distance_heuristic = torch.reciprocal(current_distance_matrix + 1e-6)  # Modified distance heuristic
    
    # Change how the delivery score is calculated by considering inverse demand magnitudes
    delivery_score = 1.0 / (delivery_node_demands + 1.0)
    
    # Modify the calculation of load score by employing a non-linear transformation
    load_score = torch.exp(-torch.abs(current_load - current_load.mean()) * 0.2)
    
    # Compute a random matrix for exploration
    randomness_matrix = torch.randn_like(current_distance_matrix) * 0.2

    # Combine heuristic scores with updated calculations
    overall_scores = distance_heuristic + delivery_score.unsqueeze(0) + load_score.unsqueeze(1) + randomness_matrix

    return overall_scores
```
