```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Customized heuristics based on distance matrix, delivery demands, and current load

    # Adjust the calculation of distance-based heuristic score with enhanced random diversity
    normalized_distance_scores = -current_distance_matrix / torch.max(current_distance_matrix) + torch.randn_like(current_distance_matrix) * 0.5

    # Custom scoring based on delivery demands and available capacity considering only high-demand nodes
    high_demand_mask = delivery_node_demands > torch.mean(delivery_node_demands)
    delivery_score = (delivery_node_demands.unsqueeze(0) - current_load.unsqueeze(1)) * 0.6 + torch.max(delivery_node_demands) / 3 + torch.randn_like(current_distance_matrix) * 0.4
    demand_scores = torch.where(high_demand_mask.unsqueeze(0), delivery_score, torch.zeros_like(current_distance_matrix))

    # Combine distance and demand scores with diverse noise for exploration
    combined_scores = normalized_distance_scores + demand_scores + torch.randn_like(current_distance_matrix) * 0.7

    # Keep other parts unchanged
    
    return combined_scores
```
