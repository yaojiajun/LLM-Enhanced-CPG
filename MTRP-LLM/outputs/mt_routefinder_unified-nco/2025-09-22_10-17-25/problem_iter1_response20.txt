```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Modified heuristics_v2 function with changes in distance and demand-based heuristics

    # New evaluation for distance based on cumulative reductions
    reduced_distances = torch.cumsum(current_distance_matrix, dim=1)  # Calculate cumulative reductions
    cumulative_distance_score = - reduced_distances / torch.max(reduced_distances) + torch.randn_like(reduced_distances) * 0.7

    # Introducing a competition-based demand scoring with diversified scales and offset
    comp_amplitude = torch.max(delivery_node_demands)  # Competitiveness amplitude
    comp_scale = 1 + 0.5 * torch.rand(1)  # Competitiveness control
    competition_score = (delivery_node_demands.unsqueeze(0) / (current_load.unsqueeze(1) + 1e-6)) * comp_amplitude * comp_scale + torch.randn_like(current_distance_matrix) * 0.3

    # Preserve current load constraints for maintaining feasible configurations
    load_constraints = torch.clamp(current_load, min=0)

    modified_scores = cumulative_distance_score + competition_score + load_constraints

    return modified_scores

```
