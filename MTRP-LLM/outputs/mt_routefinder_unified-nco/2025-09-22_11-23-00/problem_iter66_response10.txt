```python
import torch
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
   
    mutated_distance_scores = -1 * (current_distance_matrix ** 1.5) * 0.25 - torch.randn_like(current_distance_matrix) * 0.15
    
    modified_demand_scores = 0.8 * (current_load.unsqueeze(1) - delivery_node_demands.unsqueeze(0).float())
    
    time_score = 0.7 * (((arrival_times - time_windows[:, 0].unsqueeze(0)) + (time_windows[:, 1].unsqueeze(0) - arrival_times))*0.5).max(dim=0).values
    
    adjusted_pickup_load = (current_load + pickup_node_demands.unsqueeze(0).float()).clamp(0.1)
    pickup_score = 0.1 * (adjusted_pickup_load / (1 + current_distance_matrix))  # Adjusted pickup_score calculation
    
    open_delivery_score = (-current_distance_matrix ** 1.4 / (delivery_node_demands_open.unsqueeze(0) + torch.exp(-torch.mean(current_load_open)))).clamp(min=-2, max=2) * 0.3
    
    length_score = ((current_length.unsqueeze(1) / (1 + current_distance_matrix)) * 0.3).clamp(min=-0.8, max=0.8)  # Modified length_score calculation

    overall_scores = mutated_distance_scores + modified_demand_scores - time_score + pickup_score + open_delivery_score + length_score

    return overall_scores
```
