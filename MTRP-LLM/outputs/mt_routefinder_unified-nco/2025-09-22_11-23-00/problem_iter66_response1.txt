```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    mutated_distance_scores = -1 * (current_distance_matrix ** 1.4) * 0.32 - torch.randn_like(current_distance_matrix) * 0.18

    modified_demand_scores = (current_load.unsqueeze(1) - delivery_node_demands ** 1.2 * 0.3) + \
                             (torch.exp(current_load_open) * 0.5 + torch.randn_like(current_distance_matrix) * 0.2)

    time_score = torch.maximum(torch.maximum(arrival_times - time_windows[:, 0].unsqueeze(0), time_windows[:, 1].unsqueeze(0) - arrival_times), torch.tensor(0.0)).sum(dim=0) * 0.35

    adjusted_pickup_load = current_load.unsqueeze(1) + pickup_node_demands.unsqueeze(0).float()
    pickup_score = (1 / (1 + current_distance_matrix)) * 0.13  # Adjusted pickup_score calculation

    open_delivery_score = (-current_distance_matrix ** 1.1 / 
                            (delivery_node_demands_open.unsqueeze(0) + torch.mean(current_load_open) + 1e-8)).clamp(min=-1, max=1) * 0.28

    length_score = (current_length.unsqueeze(1) / (1 + current_distance_matrix)).tanh() * 0.15  # Modified length_score calculation

    overall_scores = mutated_distance_scores + modified_demand_scores - time_score + pickup_score + open_delivery_score - length_score

    return overall_scores
```
