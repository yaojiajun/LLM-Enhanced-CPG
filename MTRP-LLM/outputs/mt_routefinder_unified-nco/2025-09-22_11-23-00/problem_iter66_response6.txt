```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    distance_score = -torch.log(current_distance_matrix + 1) * 0.2 + torch.randn_like(current_distance_matrix) * 0.4
    
    modified_demand_scores = (current_load.unsqueeze(1) - delivery_node_demands.unsqueeze(0).float()) * 0.4 
    
    time_score = 0.7 * ((torch.max(arrival_times - time_windows[:, 0].unsqueeze(0), dim=0).values * 0.5) +  
                        (torch.max(time_windows[:, 1].unsqueeze(0) - arrival_times, dim=0).values * 0.5))
    
    adjusted_pickup_load = current_load.unsqueeze(1) + pickup_node_demands.unsqueeze(0).float()    
    pickup_score = (torch.exp(-adjusted_pickup_load.abs()) * 0.3) - (current_distance_matrix**2 / adjusted_pickup_load) * 0.15
    
    open_delivery_score = (-current_distance_matrix ** 1.1 / (delivery_node_demands_open.unsqueeze(0) + current_load_open)).clamp(min=-1, max=1) * 0.25
    
    length_score = (current_length.unsqueeze(1) ** 0.8 / (1 + current_distance_matrix)).clamp(min=-0.5, max=0.5) * 0.10    
    
    overall_scores = distance_score + modified_demand_scores - time_score + pickup_score + open_delivery_score + length_score
    
    return overall_scores
```
