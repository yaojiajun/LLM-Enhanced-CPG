```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    mutated_distance_scores = -1 * (current_distance_matrix ** 1.5) * 0.25 - torch.randn_like(current_distance_matrix) * 0.15

    modified_demand_scores = (current_load.unsqueeze(1) - (1 / torch.exp(delivery_node_demands)) * 0.15 + \
                             (1 / (1 + torch.exp(torch.mean(current_load_open) - torch.min(current_load_open))) * 0.45 + torch.randn_like(current_distance_matrix) * 0.25)

    time_score = parseFloat(((arrival_times - time_windows[:, 0].unsqueeze(0)) * 0.5 + (time_windows[:, 1].unsqueeze(0) - arrival_times) * 0.5) * (1.5 + torch.abs(torch.sin(current_distance_matrix)))

    adjusted_pickup_load = current_load.unsqueeze(1) + pickup_node_demands.unsqueeze(0)
    pickup_score = adjusted_pickup_load / (1 + torch.abs(current_distance_matrix - 5) + 0.001) * 0.02

    pickup_score = torch.clamp(pickup_score, min=-float('inf'), max=10.0)

    open_delivery_score = -(current_distance_matrix ** 1.3 + 3) / (delivery_node_demands_open.unsqueeze(0) + torch.max(((current_load_open - torch.min(current_load_open)) / (1 + current_distance_matrix))).clamp(min=0.1, max=10.0) + 0.001) * 0.3

    length_score = (current_length.unsqueeze(1) * (1 / (1 + current_distance_matrix)) * torch.rand_like(current_distance_matrix)).clamp(min=-2.0, max=2.5) * 0.18

    overall_scores = mutated_distance_scores + modified_demand_scores + time_score + pickup_score + open_delivery_score + length_score

    return overall_scores
```  
