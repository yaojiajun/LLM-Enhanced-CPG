```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    mutated_distance_scores = -1 * ((current_distance_matrix ** 1.5) + torch.randn_like(current_distance_matrix) * 0.1)

    modified_demand_scores = ((current_load.unsqueeze(1) - delivery_node_demands.unsqueeze(0).float()) * 0.3 + 
                              ((1 / (torch.mean(current_load_open) + 1e-6) * delivery_node_demands_open.unsqueeze(0)).clamp(max=1.5) - torch.randn_like(current_distance_matrix) * 0.2))

    time_score = 0.6 * (((time_windows[:, 1].unsqueeze(0) - arrival_times) + 0.1).clamp(min=0) / (1 + (10 * ((arrival_times - time_windows[:, 0].unsqueeze(0)).clamp(min=0)))))

    modified_pickup_load = current_load.unsqueeze(1) + pickup_node_demands.unsqueeze(0).float()
    pickup_score = (modified_pickup_load / (1 + current_distance_matrix) ** 2.5).clamp(max=2) * 0.25  

    open_delivery_score = ((-current_distance_matrix ** 1.3 / (delivery_node_demands_open.unsqueeze(0) + torch.mean(current_load_open) * 0.5 + 1e-6)).clamp(min=-1, max=2)) * 0.35 

    length_score = (current_length.unsqueeze(1) / (1 + current_distance_matrix) ** 0.8).clamp(min=-0.8, max=0.8) * 0.1 

    overall_scores = mutated_distance_scores + modified_demand_scores - time_score + pickup_score + open_delivery_score + length_score

    return overall_scores
```
