```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    mutated_distance_scores = -1 * ((2 * torch.exp(current_distance_matrix) - 4) * 0.15) + torch.randn_like(current_distance_matrix) * 0.1
    
    modified_demand_scores = (current_load.unsqueeze(1) - delivery_node_demands.unsqueeze(0).float()) * 0.2 + \
                             (1.5 / (1 + torch.exp(torch.mean(current_load_open) - torch.min(current_load_open))) * 0.35 + torch.randn_like(current_distance_matrix) * 0.05)
                             
    distance_heuristic = torch.exp(-0.5 * current_distance_matrix) - torch.randn_like(current_distance_matrix) * 0.2
    
    pickup_score = (torch.mean(distance_heuristic) / (1 + current_distance_matrix) ** 2) * 0.1 * (1 - (delivery_node_demands.unsqueeze(0) / (current_load.unsqueeze(1) + 1)))
    
    pickup_score = torch.clamp(pickup_score, min=-float('inf'), max=float('inf'))
    
    open_delivery_score = (-current_distance_matrix ** 1.2 / (delivery_node_demands_open.unsqueeze(0) + torch.mean(current_load_open)*1.2)).clamp(min=-2, max=2) * 0.25 
    
    length_score = (current_length.unsqueeze(1) / (1 + current_distance_matrix)).clamp(min=-1, max=1) * 0.15
    
    overall_scores = mutated_distance_scores + modified_demand_scores + distance_heuristic - pickup_score + open_delivery_score + length_score
    
    return overall_scores
```
