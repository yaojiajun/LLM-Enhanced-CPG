```python
import torch
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    mutated_distance_scores = -1 * (current_distance_matrix ** 1.4) * 0.25 - torch.randn_like(current_distance_matrix) * 0.2

    modified_demand_scores = (current_load.unsqueeze(1) - delivery_node_demands.unsqueeze(0).float()) * 0.4 + \
                             (1 / (1 + torch.exp(torch.median(current_load_open) - torch.min(current_load_open))) * 0.5 + torch.randn_like(current_distance_matrix) * 0.2)

    time_penalty = 0.2
    penalized_late_times = torch.max(0, arrival_times - time_windows[:, 1].unsqueeze(0))
    late_time_score = torch.sum(penalized_late_times, dim=0) * time_penalty
    early_time_score = torch.sum(torch.max(time_windows[:, 0].unsqueeze(0) - arrival_times, torch.zeros_like(arrival_times))) * time_penalty / 2
    time_score = late_time_score - early_time_score

    adjusted_pickup_load = current_load + 0.5 * pickup_node_demands
    pickup_score = adjusted_pickup_load / (1 + current_distance_matrix) * 0.15  # Adjusted pickup_score

    open_delivery_score = (-current_distance_matrix ** 1.3 / (delivery_node_demands_open.unsqueeze(0) + torch.max(current_load_open))).clamp(min=-1, max=1) * 0.3  # Updated open_delivery_score

    accumulated_length = torch.sum(current_length)
    length_score = (current_length.unsqueeze(1) / (1 + accumulated_length / 100)).clamp(min=-0.5, max=0.8) * 0.1  # Modified length_score calculation

    overall_scores = mutated_distance_scores + modified_demand_scores - time_score + pickup_score + open_delivery_score + length_score

    return overall_scores
```
