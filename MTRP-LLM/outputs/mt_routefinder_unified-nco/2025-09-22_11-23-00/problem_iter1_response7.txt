```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    new_distance_scores = -1 * (torch.sqrt(current_distance_matrix) * 0.7 - 0.2 * current_distance_matrix ** 1.1)  # Modified distance heuristic

    random_delivery_scores = torch.randn_like(delivery_node_demands) * 0.1
    stochastic_pickup_scores = (current_load / (1 + pickup_node_demands) + torch.sin(current_load * 0.5) + random_delivery_scores) * 0.35  # Modified pickup score calculation

    total_delivery_load = delivery_node_demands.unsqueeze(0) + torch.max(current_load, current_load_open).unsqueeze(1)
    demand_balancing = ((total_delivery_load / (1 + (current_distance_matrix + 1).unsqueeze(0))) * 0.25).clamp(min=-0.5, max=0.5)  # Modified demand balancing in the total score

    few_load_penalty = (current_load < 0.1).float() * -10.0
    adjusted_load_part = (torch.log(current_load + 2) * 0.15).clamp(min=-0.7, max=0.7) - few_load_penalty.reshape(-1, 1)

    updated_overall_scores = new_distance_scores - stochastic_pickup_scores + demand_balancing + adjusted_load_part

    return updated_overall_scores
```
