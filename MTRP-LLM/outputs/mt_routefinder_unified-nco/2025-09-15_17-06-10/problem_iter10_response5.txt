```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Introduce enhanced randomness and effective normalization
    rand_weights = torch.rand_like(current_distance_matrix) * 0.5 + 0.5  # Random weights in [0.5, 1.0]

    # Normalize distance matrix using min-max scaling
    min_dist = current_distance_matrix.min()
    max_dist = current_distance_matrix.max()
    normalized_distance = (current_distance_matrix - min_dist) / (max_dist - min_dist + 1e-6)  # Adding small epsilon to avoid division by zero

    # Evaluate delivery feasibility
    delivery_feasibility = (current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0)).float()
    pickup_feasibility = (current_load_open.unsqueeze(1) >= pickup_node_demands.unsqueeze(0)).float()
    
    # Heuristic indicators based on distance and feasibility
    score1 = -normalized_distance * delivery_feasibility * rand_weights  # Minimize distances for feasible deliveries
    score2 = normalized_distance * (1 - pickup_feasibility)  # Penalize distances for infeasible pickups

    # Compute time window feasibility
    time_window_start = time_windows[:, 0].unsqueeze(0)
    time_window_end = time_windows[:, 1].unsqueeze(0)
    arrival_time = arrival_times.unsqueeze(1)

    # Penalizing based on time windows
    time_window_penalty = torch.where((arrival_time < time_window_start) | (arrival_time > time_window_end), torch.tensor(float('inf')).to(arrival_time.device), torch.tensor(0.0).to(arrival_time.device))

    # Adjust heuristic scores with time window penalties
    heuristic_scores = score1 + score2 + time_window_penalty

    # Apply a random perturbation to enhance exploration
    random_perturbation = torch.randn_like(heuristic_scores) * 0.1  # Small random perturbation
    heuristic_scores += random_perturbation

    return heuristic_scores
```
