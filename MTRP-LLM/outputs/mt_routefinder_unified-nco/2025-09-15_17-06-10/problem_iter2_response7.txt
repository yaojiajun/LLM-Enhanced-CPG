```python
import torch
import torch.nn.functional as F

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:

    # Normalize inputs
    normalized_distance = F.normalize(current_distance_matrix, p=2, dim=-1)
    normalized_load = F.normalize(current_load, p=2, dim=-1)
    normalized_time_windows = F.normalize(time_windows, p=2, dim=-1)
    normalized_arrival_times = F.normalize(arrival_times, p=2, dim=-1)
    normalized_length = F.normalize(current_length, p=2, dim=-1)

    # Combine multiple indicators with weighted scoring
    score1 = torch.sigmoid(normalized_distance) * 0.3
    score2 = F.relu(torch.sin(normalized_load)) * 0.2
    score3 = torch.sigmoid(normalized_time_windows) * 0.2
    score4 = torch.sigmoid(normalized_length) * 0.3

    # Introduce controlled randomness
    rand_scores = torch.rand_like(current_distance_matrix) * 0.1

    heuristic_scores = score1 + score2 + score3 + score4 + rand_scores

    return heuristic_scores
```
