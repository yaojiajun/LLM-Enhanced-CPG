```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, 
                  delivery_node_demands: torch.Tensor, 
                  current_load: torch.Tensor, 
                  delivery_node_demands_open: torch.Tensor, 
                  current_load_open: torch.Tensor, 
                  time_windows: torch.Tensor, 
                  arrival_times: torch.Tensor, 
                  pickup_node_demands: torch.Tensor, 
                  current_length: torch.Tensor) -> torch.Tensor:
    
    # Randomization for exploration
    rand_weights = torch.rand_like(current_distance_matrix) * 0.1
    
    # Normalize distance matrix for scoring
    normalized_distance = current_distance_matrix / (torch.max(current_distance_matrix) + 1e-5)
    
    # Compute decision indicators
    delivery_feasibility = (current_load.unsqueeze(-1) >= delivery_node_demands.unsqueeze(0)).float()
    pickup_feasibility = (current_load_open.unsqueeze(-1) >= pickup_node_demands.unsqueeze(0)).float()
    
    time_window_opening = (time_windows[:, 0].unsqueeze(0) <= arrival_times).float()
    time_window_closing = (time_windows[:, 1].unsqueeze(0) >= arrival_times).float()
    time_window_feasibility = time_window_opening * time_window_closing
    
    # Combining indicators with weights and transformations
    score1 = torch.sigmoid(1 - normalized_distance) * delivery_feasibility * time_window_feasibility + rand_weights
    score2 = torch.relu(torch.cos(current_distance_matrix)) * pickup_feasibility + rand_weights

    # Combine scores into heuristic scores
    heuristic_scores = score1 - score2
    
    # Normalize the scores
    heuristic_scores = (heuristic_scores - torch.min(heuristic_scores)) / (torch.max(heuristic_scores) - torch.min(heuristic_scores) + 1e-5)

    return heuristic_scores
```
