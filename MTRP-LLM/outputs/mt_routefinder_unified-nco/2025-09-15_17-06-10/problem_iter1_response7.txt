```python
import torch
import torch.nn.functional as F
import random

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Compute a heuristic score matrix based on distance and load constraints
    score_matrix = torch.zeros_like(current_distance_matrix)
    
    # Apply enhanced randomness for more diverse exploration
    random_noise = torch.rand_like(score_matrix) * random.uniform(0.5, 1.5)
    score_matrix -= current_distance_matrix * random_noise
    
    # Incorporate load constraints
    load_constraint_scores = F.relu(current_load - delivery_node_demands.view(1, -1))
    load_constraint_scores_open = F.relu(current_load_open - delivery_node_demands_open.view(1, -1))
    score_matrix -= load_constraint_scores + load_constraint_scores_open
    
    return score_matrix
    
```
