```python
import torch

def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Normalize distance matrix to enhance score stability
    max_distance = torch.max(current_distance_matrix)
    normalized_distance = current_distance_matrix / max_distance if max_distance > 0 else current_distance_matrix

    # Introduce randomness for exploration, using distinct weights
    exploration_factor = torch.rand_like(normalized_distance) * 0.5 + 0.5  # Range [0.5, 1.0]

    # Compute capacity and time window constraints
    delivery_capacity_score = torch.where(
        current_load.unsqueeze(1) >= delivery_node_demands.unsqueeze(0),
        torch.tensor(1.0, device=current_load.device),
        torch.tensor(0.0, device=current_load.device)
    )

    time_window_score = torch.where(
        (arrival_times + normalized_distance).unsqueeze(1) >= time_windows[:, 0] & 
        (arrival_times + normalized_distance).unsqueeze(1) <= time_windows[:, 1], 
        torch.tensor(1.0, device=current_length.device), 
        torch.tensor(0.0, device=current_length.device)
    )

    # Calculate heuristic scores based on distance and constraints
    distance_score = torch.sigmoid(torch.tanh(normalized_distance)) * exploration_factor
    constraint_score = delivery_capacity_score * time_window_score
    
    # Combine scores into a final heuristic score
    heuristic_scores = distance_score * constraint_score - (1 - constraint_score) * (1 - distance_score)

    # Enhance randomness to diversify choices further
    random_adjustment = exploration_factor * torch.randn_like(heuristic_scores) * 0.1
    heuristic_scores += random_adjustment

    # Ensure scores are normalized and bounded
    heuristic_scores = torch.clamp(heuristic_scores, min=-1, max=1)

    return heuristic_scores
```
