```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    
    # Normalize input data
    norm_distance = torch.sigmoid(current_distance_matrix)
    norm_load = torch.sigmoid(current_load)
    norm_load_open = torch.sigmoid(current_load_open)
    norm_length = torch.sigmoid(current_length)
    
    # Introduce randomness and nonlinear combinations for heuristic scores
    random_score = torch.rand_like(current_distance_matrix) * 0.1  # Randomness component
    score1 = torch.exp(norm_distance)  # Nonlinear combination
    score2 = torch.sin(norm_load)  # Nonlinear combination
    score3 = torch.cos(norm_load_open)  # Nonlinear combination
    score4 = torch.tanh(norm_length)  # Nonlinear combination
    
    # Combine scores with randomness
    heuristic_scores = (score1 + score2 - score3 + score4 + random_score) / 3.0
    
    return heuristic_scores
```
