```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Enhance heuristic function with diversified non-linear combinations and randomness
    rand_weights1 = torch.rand_like(current_distance_matrix)
    rand_weights2 = torch.rand_like(current_distance_matrix)

    normalized_distance = current_distance_matrix / torch.max(current_distance_matrix)
    normalized_demands = delivery_node_demands / torch.max(delivery_node_demands)
    normalized_load = current_load / torch.max(current_load)
    normalized_time_windows = (time_windows - time_windows.min()) / (time_windows.max() - time_windows.min())
    
    score1 = torch.sigmoid(normalized_distance) * rand_weights1
    score2 = torch.cos(normalized_demands) * rand_weights2
    score3 = torch.relu(torch.tanh(normalized_load)) + torch.abs(torch.sin(normalized_time_windows))

    heuristic_scores = score1 - score2 + score3
    
    return heuristic_scores
```
