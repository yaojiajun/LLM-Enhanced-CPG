```python
def heuristics_v2(current_distance_matrix: torch.Tensor, delivery_node_demands: torch.Tensor, current_load: torch.Tensor, delivery_node_demands_open: torch.Tensor, current_load_open: torch.Tensor, time_windows: torch.Tensor, arrival_times: torch.Tensor, pickup_node_demands: torch.Tensor, current_length: torch.Tensor) -> torch.Tensor:
    # Generate random weights for exploration
    rand_weights1 = torch.rand_like(current_distance_matrix)
    rand_weights2 = torch.rand_like(current_distance_matrix)

    # Normalize the distance matrix
    max_distance = torch.max(current_distance_matrix, dim=1, keepdim=True)[0]
    normalized_distance = current_distance_matrix / (max_distance + 1e-10)  # Avoid division by zero

    # Compute scores based on diverse scoring methods
    score1 = torch.sin(normalized_distance) * rand_weights1
    score2 = torch.sigmoid(current_distance_matrix) + rand_weights2
    score3 = torch.tanh(current_length.unsqueeze(1) - current_distance_matrix)  # Length constraint consideration
    score4 = torch.exp(-torch.relu(arrival_times - time_windows[:, :, 0]))  # Time window adherence

    # Combine scores with a weighted average for balance between exploration and exploitation
    heuristic_scores = (score1 + score2 + score3 - score4) / 4.0

    return heuristic_scores
```
